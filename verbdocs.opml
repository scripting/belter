<?xml version="1.0" encoding="ISO-8859-1"?>
<opml version="2.0">
	<head>
		<title>verbdocs.opml</title>
		<dateModified>Tue, 28 Mar 2023 15:40:51 GMT</dateModified>
		<expansionState></expansionState>
		<vertScrollState>1</vertScrollState>
		<windowTop>300</windowTop>
		<windowLeft>700</windowLeft>
		<windowBottom>900</windowBottom>
		<windowRight>1500</windowRight>
		</head>
	<body created="Mon, 27 Mar 2023 21:34:08 GMT" text="verbdocs.opml">
		<outline text="string verbs">
			<outline text="string.addCommas">
				<outline text="Syntax">
					<outline text="string.addCommas (number)"></outline>
					</outline>
				<outline text="Params">
					<outline text="The param is a large number that can be made easier to read by adding commas to it."></outline>
					</outline>
				<outline text="Returns">
					<outline text="A string."></outline>
					</outline>
				<outline text="Examples">
					<outline text="string.addCommas (11709445200)">
						<outline text="11,709,445,200"></outline>
						</outline>
					<outline text="string.addCommas (12)">
						<outline text="12"></outline>
						</outline>
					<outline text="string.addCommas (&quot;abcdefghijklmnopqrstuvwxyz&quot;)">
						<outline text="abcdefghijklmnopqrstuvwxyz"></outline>
						</outline>
					</outline>
				</outline>
			<outline text="string.addPeriodAtEnd">
				<outline text="Syntax">
					<outline text="string.addPeriodAtEnd (string)"></outline>
					</outline>
				<outline text="Params">
					<outline text="string is a sentence that may not have a period at the end. "></outline>
					</outline>
				<outline text="Returns">
					<outline text="The string, possibly with a period added at the end. "></outline>
					</outline>
				<outline text="Notes">
					<outline text="It's a complicated and somewhat quirky algorithm. "></outline>
					<outline text="First we call string.trimWhitespace to remove any spaces or newlines at the beginning and end of the string."></outline>
					<outline text="Then, if the string ends with a period, comma, question mark, quote, colon, semicolon or exclamation point, we do nothing. Putting a period after these characters would usually be incorrect. "></outline>
					<outline text="Used in Radio3 to pre-process a linkblog post. "></outline>
					</outline>
				<outline text="Examples">
					<outline text="string.addPeriodAtEnd (&quot;I like ice cream&quot;)">
						<outline text="I like ice cream."></outline>
						</outline>
					<outline text="string.addPeriodAtEnd (&quot;What is your favorite flavor?&quot;)">
						<outline text="What is your favorite flavor?"></outline>
						</outline>
					</outline>
				</outline>
			<outline text="string.beginsWith">
				<outline text="Syntax">
					<outline text="string.beginsWith (s, possibleBeginning, flUnicase)"></outline>
					</outline>
				<outline text="Params">
					<outline text="The first param is a string that might begin with the second param."></outline>
					<outline text="flUnicase, a boolean, is optional. If true the search is done regardless of the case of the characters. If true the match doesn't have to be exact regarding the case of the characters, so &quot;hooray&quot; will match &quot;Hooray&quot; or &quot;hOOrAy&quot; if flUnicase is true."></outline>
					</outline>
				<outline text="Returns">
					<outline text="true if the string begins with the other, false if it doesn't."></outline>
					</outline>
				<outline text="Example">
					<outline text="string.beginsWith (&quot;hooray for hollywood&quot;, &quot;hoo&quot;)">
						<outline text="true"></outline>
						</outline>
					</outline>
				</outline>
			<outline text="string.bumpUrlString">
				<outline text="Syntax">
					<outline text="string.bumpUrlString (string)"></outline>
					</outline>
				<outline text="Params">
					<outline text="string either undefined or the result of having called string.bumpUrlString. "></outline>
					</outline>
				<outline text="Returns">
					<outline text="The next string in the sequence, as in a URL shortener application."></outline>
					</outline>
				<outline text="Notes">
					<outline text="The first string it returns is 1, then 2, then it runs through the alphabet. After z it returns 00, then 01."></outline>
					<outline text="It can be used in implementing a URL shortener, to generate a sequence of strings, that can be used as aliases for another perhaps longer string. "></outline>
					</outline>
				<outline text="Examples">
					<outline text="string.bumpUrlString (undefined)">
						<outline text="1"></outline>
						</outline>
					<outline text="string.bumpUrlString (&quot;z&quot;)">
						<outline text="00"></outline>
						</outline>
					<outline text="string.bumpUrlString (&quot;zz&quot;)">
						<outline text="000"></outline>
						</outline>
					<outline text="string.bumpUrlString (&quot;ZZ&quot;) //not case-sensitive">
						<outline text="000"></outline>
						</outline>
					</outline>
				</outline>
			<outline text="string.contains">
				<outline text="Syntax">
					<outline text="string.contains (s, whatItMightContain, flUnicase) returns boolean"></outline>
					</outline>
				<outline text="What it does">
					<outline text="Determines if one string contains another."></outline>
					<outline text="The third parameter, flUnicase, is optional, it defaults to true. "></outline>
					</outline>
				<outline text="Returns">
					<outline text="true if the string contains the other, false if it doesn't."></outline>
					</outline>
				<outline text="Example">
					<outline text="dialog.alert (string.contains (&quot;http://november.com&quot;, &quot;november&quot;)) //displays true"></outline>
					</outline>
				</outline>
			<outline text="string.countFields">
				<outline text="Syntax">
					<outline text="string.countFields (s, ch)"></outline>
					</outline>
				<outline text="Params">
					<outline text="s is a string, ch is a 1-character string."></outline>
					</outline>
				<outline text="Returns">
					<outline text="The number of fields in the string, with fields determined by the character."></outline>
					</outline>
				<outline text="Examples">
					<outline text="string.countFields (&quot;scripting.com/2003/08/12.html&quot;, &quot;/&quot;)">
						<outline text="4"></outline>
						</outline>
					<outline text="string.countFields (&quot;Do you know the way to San Jose?&quot;, &quot; &quot;)">
						<outline text="8"></outline>
						</outline>
					<outline text="string.countFields (&quot;Come hear Uncle John's Band.&quot;, &quot;/&quot;)">
						<outline text="1"></outline>
						</outline>
					</outline>
				<outline text="See also">
					<outline text="string.nthField"></outline>
					<outline text="string.lastField"></outline>
					</outline>
				</outline>
			<outline text="string.dayOfWeekToString">
				<outline text="Syntax">
					<outline text="string.dayOfWeekToString (number)"></outline>
					</outline>
				<outline text="Param">
					<outline text="A number between 0 and 6. 0 corresponds to Sunday, 6 to Saturday."></outline>
					</outline>
				<outline text="Returns">
					<outline text="A string like &quot;Sunday&quot;, &quot;Monday&quot;, &quot;Tuesday&quot;, &quot;Wednesday&quot;, &quot;Thursday&quot;, &quot;Friday&quot;, &quot;Saturday&quot; or the empty string. "></outline>
					</outline>
				<outline text="Errors">
					<outline text="If the number is out of range it returns the empty string."></outline>
					</outline>
				<outline text="Example">
					<outline text="string.dayOfWeekToString (3)">
						<outline text="Wednesday"></outline>
						</outline>
					</outline>
				<outline text="See also">
					<outline text="string.monthToString"></outline>
					</outline>
				</outline>
			<outline text="string.decodeXml">
				<outline text="Syntax">
					<outline text="string.decodeXml (string)"></outline>
					</outline>
				<outline text="Params">
					<outline text="A string that may include encoded XML."></outline>
					</outline>
				<outline text="Returns">
					<outline text="The decoded version of the string."></outline>
					</outline>
				<outline text="Notes">
					<outline text="We look for four strings: &amp;amp;lt; &amp;amp;gt; &amp;amp;amp; and &amp;amp;apos; and convert them to &lt; &gt; &amp; and '."></outline>
					<outline text="At some point it may make sense to look for other strings. "></outline>
					</outline>
				<outline text="Examples">
					<outline text="string.decodeXml (&quot;&amp;amp;lt;script&amp;amp;gt;&quot;)">
						<outline text="&amp;lt;script&gt;"></outline>
						</outline>
					<outline text="string.decodeXml (&quot;Lennon &amp;amp;amp; McCartney&quot;)">
						<outline text="Lennon &amp; McCartney"></outline>
						</outline>
					</outline>
				</outline>
			<outline text="string.delete">
				<outline text="Syntax">
					<outline text="string.delete (string, index, count)"></outline>
					</outline>
				<outline text="Params">
					<outline text="The first parameter is a string that you want to delete characters from. "></outline>
					<outline text="The second parameter is the 1-based location of the first character to delete."></outline>
					<outline text="The third parameter is the number of characters to delete."></outline>
					</outline>
				<outline text="Returns">
					<outline text="The result of deleting the characters from the string. "></outline>
					</outline>
				<outline text="Notes">
					<outline text="If you try to delete more characters than are present, it deletes as many as it can."></outline>
					<outline text="If you try to delete starting past the end of the string, you end up deleting nothing."></outline>
					</outline>
				<outline text="Example">
					<outline text="string.delete (&quot;123456789&quot;, 3, 1)">
						<outline text="12456789"></outline>
						</outline>
					<outline text="string.delete (&quot;123456789&quot;, 2, 1000)">
						<outline text="1"></outline>
						</outline>
					<outline text="string.delete (&quot;123456789&quot;, 100, 3)">
						<outline text="123456789"></outline>
						</outline>
					</outline>
				</outline>
			<outline text="string.encodeHtml">
				<outline text="Syntax">
					<outline text="string.encodeHtml (string)"></outline>
					</outline>
				<outline text="Params">
					<outline text="A string that possibly contains HTML markup. "></outline>
					</outline>
				<outline text="Returns">
					<outline text="The result of encoding angle brackets and quotes.  "></outline>
					</outline>
				<outline text="Notes">
					<outline text="If you try to delete more characters than are present, it deletes as many as it can."></outline>
					<outline text="If you try to delete starting past the end of the string, you end up deleting nothing."></outline>
					</outline>
				<outline text="Examples">
					<outline text="string.encodeHtml (&quot;Still diggin!&quot;)">
						<outline text="Still diggin!"></outline>
						</outline>
					<outline text="string.encodeHtml (&quot;I &lt;b&gt;love&lt;/b&gt; a parade&quot;)">
						<outline text="I &amp;#60;b&amp;#62;love&amp;#60;/b&amp;#62; a parade"></outline>
						</outline>
					</outline>
				</outline>
			<outline text="string.endsWith">
				<outline text="Syntax">
					<outline text="string.endsWith (string1, string2, boolean)"></outline>
					</outline>
				<outline text="Params">
					<outline text="The first string is the one we're looking in."></outline>
					<outline text="The second is what we're looking for in the string."></outline>
					<outline text="The boolean says if the search is unicase (it's optional, if not present it's true)."></outline>
					</outline>
				<outline text="Returns">
					<outline text="True if the first string ends with the second. "></outline>
					</outline>
				<outline text="Examples">
					<outline text="string.endsWith (&quot;Hooray for Hollywood&quot;, &quot;wood&quot;)">
						<outline text="true"></outline>
						</outline>
					<outline text="string.endsWith (&quot;Hooray for Hollywood&quot;, &quot;Wood&quot;, false)">
						<outline text="false"></outline>
						</outline>
					<outline text="string.endsWith (&quot;Hooray for Hollywood&quot;, &quot;wheat&quot;)">
						<outline text="false"></outline>
						</outline>
					</outline>
				</outline>
			<outline text="string.extensionToMimeType">
				<outline text="Syntax">
					<outline text="string.extensionToMimeType (string)"></outline>
					</outline>
				<outline text="Params">
					<outline text="The string is a path to a file."></outline>
					</outline>
				<outline text="Returns">
					<outline text="Returns a &lt;a href=&quot;https://en.wikipedia.org/wiki/Media_type#Common_examples_[10]&quot;&gt;media type&lt;/a&gt; corresponding to the extension of the file. "></outline>
					<outline text="For example, if the extension is .html, it returns text/html. "></outline>
					<outline text="If there is no extension or the extension isn't recognized, it returns undefined."></outline>
					</outline>
				<outline text="Note">
					<outline text="string.extensionToMimeType calls the &lt;a href=&quot;https://github.com/scripting/utils/blob/master/daveutils.js#L1182&quot;&gt;daveutils&lt;/a&gt; function httpExt2MIME. "></outline>
					</outline>
				<outline text="Examples">
					<outline text="string.extensionToMimeType (&quot;ideas.html&quot;)">
						<outline text="text/html"></outline>
						</outline>
					<outline text="string.extensionToMimeType (&quot;config.json&quot;)">
						<outline text="application/json"></outline>
						</outline>
					<outline text="string.extensionToMimeType (&quot;config.js&quot;)">
						<outline text="application/javascript"></outline>
						</outline>
					<outline text="string.extensionToMimeType (&quot;profile.png&quot;)">
						<outline text="image/png"></outline>
						</outline>
					<outline text="string.extensionToMimeType (&quot;profile.jpg&quot;)">
						<outline text="image/jpeg"></outline>
						</outline>
					</outline>
				</outline>
			<outline text="string.filledString">
				<outline text="Syntax">
					<outline text="string.filledString (character, count)"></outline>
					</outline>
				<outline text="Params">
					<outline text="The first parameter is a string which will be replicated."></outline>
					<outline text="The second parameter is the number of times it will be replicated."></outline>
					</outline>
				<outline text="Returns">
					<outline text="A string containing a number of copies of the first parameter. "></outline>
					</outline>
				<outline text="Examples">
					<outline text="string.filledString (&quot;p&quot;, 10)">
						<outline text="pppppppppp"></outline>
						</outline>
					<outline text="string.filledString (&quot;123 &quot;, 10)">
						<outline text="123 123 123 123 123 123 123 123 123 123 "></outline>
						</outline>
					<outline text="string.filledString (&quot;\t&quot;, 3)">
						<outline text="   "></outline>
						</outline>
					</outline>
				</outline>
			<outline text="string.formatDate">
				<outline text="Syntax">
					<outline text="string.formatDate (date, format, timezone)"></outline>
					</outline>
				<outline text="Params">
					<outline text="The first parameter is a JavaScript date object. "></outline>
					<outline text="The second parameter is a string containing a format spec, following &lt;a href=&quot;https://man7.org/linux/man-pages/man3/strftime.3.html&quot;&gt;strftime&lt;/a&gt; standard."></outline>
					<outline text="The third parameter says what timezone you want the date to be in. 0 is GMT, -4 in US/Eastern. "></outline>
					</outline>
				<outline text="Returns">
					<outline text="A string, representing the date, in the format specified, in the indicated timezone."></outline>
					</outline>
				<outline text="Notes">
					<outline text="All three parameters are optional."></outline>
					<outline text="If the date is not specified, the current date-time is used."></outline>
					<outline text="If the format is not specified, we use &quot;%c&quot;."></outline>
					<outline text="If the timezone is not specified, we use the timezone that the machine that ran the script is in."></outline>
					</outline>
				<outline text="Examples">
					<outline text="string.formatDate (clock.now (), &quot;%B&quot;)">
						<outline text="March"></outline>
						</outline>
					<outline text="string.formatDate ()">
						<outline text="Sun Mar 14 2021 11:24:53 GMT-0400 (Eastern Daylight Time)"></outline>
						</outline>
					<outline text="string.formatDate (clock.now (), &quot;%l:%M %p&quot;)">
						<outline text="11:21 AM"></outline>
						</outline>
					<outline text="string.formatDate (undefined, &quot;%A, %B %e, %Y at %l:%M %p&quot;) + &quot;.&quot;">
						<outline text="Sunday, March 14, 2021 at 11:27 AM."></outline>
						</outline>
					</outline>
				</outline>
			<outline text="string.getRandomPassword">
				<outline text="Syntax">
					<outline text="string.getRandomPassword (count)"></outline>
					</outline>
				<outline text="Params">
					<outline text="count is the number of characters that will be in the random string that's generated."></outline>
					</outline>
				<outline text="Returns">
					<outline text="A string of random characters."></outline>
					</outline>
				<outline text="Examples">
					<outline text="string.getRandomPassword (20)">
						<outline text="26mxjiulbv2br8jaeutj"></outline>
						</outline>
					<outline text="string.getRandomPassword (20)">
						<outline text="pv8snpjvmbl4np4kh4mt"></outline>
						</outline>
					</outline>
				</outline>
			<outline text="string.hashMD5">
				<outline text="Syntax">
					<outline text="string.hashMD5 (string)"></outline>
					</outline>
				<outline text="Params">
					<outline text="The string is the input to the &lt;a href=&quot;https://en.wikipedia.org/wiki/MD5&quot;&gt;MD5 encryption&lt;/a&gt; algorithm."></outline>
					</outline>
				<outline text="Returns">
					<outline text="The encrypted version of the string. "></outline>
					</outline>
				<outline text="Notes">
					<outline text="You can tell with a lot of confidence that the sender who uses this function has a copy of the string without transmitting it. "></outline>
					</outline>
				<outline text="Examples">
					<outline text="string.hashMD5 (&quot;Spring forward, fall back.&quot;)">
						<outline text="26d37b732af2a3caf47a0b2c9789a0ce"></outline>
						</outline>
					<outline text="string.hashMD5 (&quot;It's even worse than it appears&quot;)">
						<outline text="d7adfe509535ad6de49a8baf0fbf7a3d"></outline>
						</outline>
					</outline>
				</outline>
			<outline text="string.innerCaseName">
				<outline text="Syntax">
					<outline text="string.innerCaseName (string)"></outline>
					</outline>
				<outline text="Params">
					<outline text="A string that contains words separated by spaces. "></outline>
					</outline>
				<outline text="Returns">
					<outline text="The innerCase version of the string, which means capitalize the first letter after every space, then remove the spaces."></outline>
					</outline>
				<outline text="Notes">
					<outline text="It's useful for creating a file name or URL from a title. "></outline>
					</outline>
				<outline text="Examples">
					<outline text="string.innerCaseName (&quot;The story of my life&quot;) + &quot;.mp3&quot;">
						<outline text="theStoryOfMyLife.mp3"></outline>
						</outline>
					</outline>
				</outline>
			<outline text="string.insert">
				<outline text="Syntax">
					<outline text="string.insert (source, dest, ix)"></outline>
					</outline>
				<outline text="Params">
					<outline text="source is a string that will be inserted into dest, also a string, and the 1-based index ix."></outline>
					</outline>
				<outline text="Returns">
					<outline text="The result of the insertion."></outline>
					</outline>
				<outline text="Bugs">
					<outline text="Behavior is unpredictable if ix is less than zero. "></outline>
					</outline>
				<outline text="Examples">
					<outline text="string.insert (&quot;Bull &quot;, &quot;My name is Mancuso.&quot;, 11)">
						<outline text="My name is Bull Mancuso."></outline>
						</outline>
					<outline text="string.insert (&quot;Hello &quot;, &quot; from Hollywood&quot;, 1)">
						<outline text=" Hello from Hollywood"></outline>
						</outline>
					</outline>
				</outline>
			<outline text="string.isAlpha">
				<outline text="Syntax">
					<outline text="string.isAlpha (ch)"></outline>
					</outline>
				<outline text="Params">
					<outline text="ch is a 1-character string."></outline>
					</outline>
				<outline text="Returns">
					<outline text="True if it's an alphabetic character, false otherwise."></outline>
					<outline text="Alphabetic characters are A-Z and a-z."></outline>
					</outline>
				<outline text="Notes">
					<outline text="If the string is longer than one character, it returns true if the first character is alphabetic, false otherwise."></outline>
					</outline>
				<outline text="Examples">
					<outline text="string.isAlpha (&quot;x&quot;)">
						<outline text="true"></outline>
						</outline>
					<outline text="string.isAlpha (&quot;1&quot;)">
						<outline text="false"></outline>
						</outline>
					<outline text="string.isAlpha (&quot;#&quot;)">
						<outline text="false"></outline>
						</outline>
					<outline text="string.isAlpha (&quot;123abc&quot;)">
						<outline text="false"></outline>
						</outline>
					</outline>
				<outline text="See also">
					<outline text="string.isNumeric"></outline>
					<outline text="string.isWhitespace"></outline>
					<outline text="string.isPunctuation"></outline>
					</outline>
				</outline>
			<outline text="string.isNumeric">
				<outline text="Syntax">
					<outline text="string.isNumeric (ch)"></outline>
					</outline>
				<outline text="Params">
					<outline text="ch is a 1-character string."></outline>
					</outline>
				<outline text="Returns">
					<outline text="True if it's a numeric character, false otherwise."></outline>
					<outline text="Numeric characters are 0-9."></outline>
					</outline>
				<outline text="Notes">
					<outline text="If the string is longer than one character, it returns true if the first character is numeric, false otherwise."></outline>
					</outline>
				<outline text="Examples">
					<outline text="string.isNumeric (&quot;4&quot;)">
						<outline text="true"></outline>
						</outline>
					<outline text="string.isNumeric (&quot;g&quot;)">
						<outline text="false"></outline>
						</outline>
					<outline text="string.isNumeric (&quot;#&quot;)">
						<outline text="false"></outline>
						</outline>
					<outline text="string.isNumeric (&quot;123abc&quot;)">
						<outline text="true"></outline>
						</outline>
					</outline>
				<outline text="See also">
					<outline text="string.isAlpha"></outline>
					<outline text="string.isWhitespace"></outline>
					<outline text="string.isPunctuation"></outline>
					</outline>
				</outline>
			<outline text="string.isPunctuation">
				<outline text="Syntax">
					<outline text="string.isPunctuation (ch)"></outline>
					</outline>
				<outline text="Params">
					<outline text="ch is a 1-character string."></outline>
					</outline>
				<outline text="Returns">
					<outline text="True if it's a punctuation character, false otherwise."></outline>
					<outline text="Punctuation characters all characters that are not alpha, numeric or whitespace characters."></outline>
					</outline>
				<outline text="Notes">
					<outline text="If the string is longer than one character, it returns true if the first character is numeric, false otherwise."></outline>
					<outline text="This function can in some cases be used to see if you need to add a period at the end of a sentence. "></outline>
					</outline>
				<outline text="Bugs">
					<outline text="Admittedly, its definition is weird, it would probably be better to enumerate the characters that are punctuation, for example, period, comma, colon, semicolon. "></outline>
					</outline>
				<outline text="Examples">
					<outline text="string.isPunctuation (&quot; &quot;)">
						<outline text="false"></outline>
						</outline>
					<outline text="string.isPunctuation (&quot;.&quot;)">
						<outline text="true"></outline>
						</outline>
					<outline text="string.isPunctuation (&quot;,&quot;)">
						<outline text="true"></outline>
						</outline>
					</outline>
				<outline text="See also">
					<outline text="string.isAlpha"></outline>
					<outline text="string.isWhitespace"></outline>
					<outline text="string.isNumeric"></outline>
					<outline text="string.isPunctuation"></outline>
					<outline text="string.trimWhitespace"></outline>
					</outline>
				</outline>
			<outline text="string.isWhitespace">
				<outline text="Syntax">
					<outline text="string.isWhitespace (ch)"></outline>
					</outline>
				<outline text="Params">
					<outline text="ch is a 1-character string."></outline>
					</outline>
				<outline text="Returns">
					<outline text="True if it's a whitespace character, false otherwise."></outline>
					<outline text="Whitespace characters are &quot; &quot;, &quot;\r&quot;, &quot;\n&quot;, &quot;\t&quot; (i.e. blank, return, newline and tab)."></outline>
					</outline>
				<outline text="Notes">
					<outline text="If the string is longer than one character, it returns true if the first character is numeric, false otherwise."></outline>
					</outline>
				<outline text="Examples">
					<outline text="string.isWhitespace (&quot; &quot;)">
						<outline text="true"></outline>
						</outline>
					<outline text="string.isWhitespace (&quot;\n&quot;)">
						<outline text="true"></outline>
						</outline>
					<outline text="string.isWhitespace (&quot;*&quot;)">
						<outline text="false"></outline>
						</outline>
					</outline>
				<outline text="See also">
					<outline text="string.isAlpha"></outline>
					<outline text="string.isWhitespace"></outline>
					<outline text="string.isNumeric"></outline>
					<outline text="string.isPunctuation"></outline>
					<outline text="string.trimWhitespace"></outline>
					</outline>
				</outline>
			<outline text="string.lastField">
				<outline text="Syntax">
					<outline text="string.lastField (s, ch)"></outline>
					</outline>
				<outline text="Params">
					<outline text="s is a string, ch is a 1-character string."></outline>
					</outline>
				<outline text="Returns">
					<outline text="A string with the contents of the last specified field in the string, with fields determined by the character."></outline>
					<outline text="If ch doesn't appear in the string, it returns the whole string."></outline>
					</outline>
				<outline text="Bugs">
					<outline text="If ch contains more than one character, the results are not easily specified."></outline>
					</outline>
				<outline text="Examples">
					<outline text="string.lastField (&quot;scripting.com/2003/08/12.html&quot;, &quot;/&quot;)">
						<outline text="12.html"></outline>
						</outline>
					<outline text="string.lastField (&quot;oh the buzzing of the bees&quot;, &quot; &quot;)">
						<outline text="bees"></outline>
						</outline>
					<outline text="string.lastField (&quot;oh the buzzing of the bees&quot;, &quot;123&quot;)">
						<outline text="oh the buzzing of the bees"></outline>
						</outline>
					</outline>
				<outline text="See also">
					<outline text="string.nthField"></outline>
					<outline text="string.countFields"></outline>
					</outline>
				</outline>
			<outline text="string.lower">
				<outline text="Syntax">
					<outline text="string.lower (s) returns string"></outline>
					</outline>
				<outline text="What it does">
					<outline text="Converts the string to lower case. "></outline>
					</outline>
				<outline text="Returns">
					<outline text="The lower case version of the string."></outline>
					</outline>
				<outline text="Example">
					<outline text="dialog.alert (string.lower (&quot;Everyone Do The Hamster Dance!&quot;))"></outline>
					</outline>
				<outline text="See also">
					<outline text="string.upper"></outline>
					</outline>
				</outline>
			<outline text="string.maxStringLength">
				<outline text="Syntax">
					<outline text="string.maxStringLength (string, maxlength, flWholeWordAtEnd, flAddElipses)"></outline>
					</outline>
				<outline text="Params">
					<outline text="The first parameter is a string that you want to be sure isn't longer than the number in the second parameter."></outline>
					<outline text="flWholeWordAtEnd is an optional boolean param. If true, we don't leave a broken word at the end of the string. Defaults to true. "></outline>
					<outline text="flAddElipses is an optional boolean. If true, we add three periods at the end of the string. Defaults to true."></outline>
					</outline>
				<outline text="Returns">
					<outline text="A string that is not longer than the indicated length."></outline>
					</outline>
				<outline text="Examples">
					<outline text="string.maxStringLength (&quot;I have a long story I would like to tell you. It begins like this.&quot;, 35)">
						<outline text="I have a long story I would like ..."></outline>
						</outline>
					<outline text="string.maxStringLength (&quot;You know nothing Jon Snow.&quot; , 80)">
						<outline text="You know nothing Jon Snow."></outline>
						</outline>
					</outline>
				</outline>
			<outline text="string.markdownProcess">
				<outline text="Syntax">
					<outline text="string.markdownProcess (string)"></outline>
					</outline>
				<outline text="Params">
					<outline text="The string contains markdown text that you want to be converted to HTML."></outline>
					</outline>
				<outline text="Returns">
					<outline text="The HTML rendering of the string."></outline>
					</outline>
				<outline text="Notes">
					<outline text="We use &lt;a href=&quot;https://github.com/StackExchange/pagedown&quot;&gt;Pagedown&lt;/a&gt;, the Markdown processor used on Stack Exchange. "></outline>
					</outline>
				<outline text="Examples">
					<outline text="string.markdownProcess (&quot;It's **even** worse than it appears.&quot;)">
						<outline text="&lt;p&gt;It's &lt;strong&gt;even&lt;/strong&gt; worse than it appears.&lt;/p&gt;"></outline>
						</outline>
					<outline text="string.markdownProcess (&quot;I read [Scripting News](http://scripting.com/).&quot;)">
						<outline text="&lt;p&gt;I read &lt;a href=&quot;http://scripting.com/&quot;&gt;Scripting News&lt;/a&gt;.&lt;/p&gt;"></outline>
						</outline>
					<outline text="string.markdownProcess (&quot;* one\n* two\n* three\n&quot;)">
						<outline text="&lt;ul&gt;">
							<outline text="&lt;li&gt;one&lt;/li&gt;"></outline>
							<outline text="&lt;li&gt;two&lt;/li&gt;"></outline>
							<outline text="&lt;li&gt;three&lt;/li&gt;"></outline>
							<outline text="&lt;/ul&gt;"></outline>
							</outline>
						</outline>
					</outline>
				</outline>
			<outline text="string.mid">
				<outline text="Syntax">
					<outline text="string.mid (string, ix, ct)"></outline>
					</outline>
				<outline text="Params">
					<outline text="The first parameter is a string that you want to get characters from. "></outline>
					<outline text="The second parameter is the 1-based location of the first character to copy."></outline>
					<outline text="The third parameter is the number of characters to copy."></outline>
					</outline>
				<outline text="Returns">
					<outline text="The result of extracting the characters from the string. "></outline>
					</outline>
				<outline text="Notes">
					<outline text="If you try to delete copy characters than are present, it copies as many as it can."></outline>
					<outline text="If you try to copy starting past the end of the string, you end up copying nothing."></outline>
					</outline>
				<outline text="Example">
					<outline text="string.mid (&quot;123456789&quot;, 3, 1)">
						<outline text="3"></outline>
						</outline>
					<outline text="string.mid (&quot;123456789&quot;, 2, 1000)">
						<outline text="23456789"></outline>
						</outline>
					</outline>
				<outline text="See also">
					<outline text="string.delete"></outline>
					<outline text="string.insert"></outline>
					</outline>
				</outline>
			<outline text="string.monthToString">
				<outline text="Syntax">
					<outline text="string.monthToString (number)"></outline>
					</outline>
				<outline text="Param">
					<outline text="A number between 0 and 11. 0 corresponds to January, 11 to December."></outline>
					</outline>
				<outline text="Returns">
					<outline text="A string like &quot;January&quot;, &quot;February&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot;June&quot;, &quot;July&quot;, &quot;August&quot;, &quot;September&quot;, &quot;October&quot;, &quot;November&quot;, &quot;December&quot; or undefined. "></outline>
					</outline>
				<outline text="Examples">
					<outline text="string.monthToString (0)">
						<outline text="January"></outline>
						</outline>
					<outline text="string.monthToString (100)">
						<outline text="undefined"></outline>
						</outline>
					</outline>
				<outline text="See also">
					<outline text="string.dayOfWeekToString"></outline>
					</outline>
				</outline>
			<outline text="string.multipleReplaceAll">
				<outline text="Syntax">
					<outline text="string.multipleReplaceAll (s, replaceTable, flCaseSensitive, startCharacters, endCharacters)"></outline>
					</outline>
				<outline text="Params">
					<outline text="s is a string."></outline>
					<outline text="replaceTable is an object, where the name of each property is a string to search for, and its value is what you want it replaced with. "></outline>
					<outline text="flCaseSensitive, a boolean, determines if the search is case-sensitive. It's optional, if undefined, it defaults to false. "></outline>
					<outline text="startCharacters is an optional string, if specified we only look at text within the first string that begins with these characters."></outline>
					<outline text="endCharacters, also optional, if specified, we only look at text within the first string that ends with these characters."></outline>
					</outline>
				<outline text="Returns">
					<outline text="A string, the result of the replacements."></outline>
					</outline>
				<outline text="Example">
					<outline text="string.multipleReplaceAll (&quot;This house costs $293,000.&quot;, {&quot;house&quot;: &quot;apartment&quot;, &quot;293,000&quot;: &quot;534,287&quot;}) ">
						<outline text="This apartment costs $534,287."></outline>
						</outline>
					</outline>
				<outline text="See also">
					<outline text="string.replaceAll"></outline>
					</outline>
				</outline>
			<outline text="string.nthField">
				<outline text="Syntax">
					<outline text="string.nthField (s, ch, n)"></outline>
					</outline>
				<outline text="Params">
					<outline text="s is a string, ch is a 1-character string, n is a number."></outline>
					<outline text="n is 1-based, i.e. the first field is 1, not 0."></outline>
					</outline>
				<outline text="Returns">
					<outline text="A string with the contents of the specified field, with fields determined by the character."></outline>
					</outline>
				<outline text="Example">
					<outline text="string.nthField (&quot;scripting.com/2003/08/12.html&quot;, &quot;/&quot;, 3)">
						<outline text="08"></outline>
						</outline>
					</outline>
				<outline text="See also">
					<outline text="string.lastField"></outline>
					<outline text="string.countFields"></outline>
					</outline>
				</outline>
			<outline text="string.padWithZeros">
				<outline text="Syntax">
					<outline text="string.padWithZeros (number, ct)"></outline>
					</outline>
				<outline text="Params">
					<outline text="number is a number you want padded with zeros."></outline>
					<outline text="ct is the number of places you want the number padded to."></outline>
					</outline>
				<outline text="Returns">
					<outline text="The padded version of the number as a string."></outline>
					</outline>
				<outline text="Notes">
					<outline text="It's useful if you want all strings produced by the code to be the same length, regardless how large the numbers are."></outline>
					</outline>
				<outline text="Examples">
					<outline text="string.padWithZeros (1200, 5)">
						<outline text="01200"></outline>
						</outline>
					<outline text="string.padWithZeros (1, 4) + &quot;.html&quot;">
						<outline text="0001.html"></outline>
						</outline>
					</outline>
				<outline text="See also">
					<outline text="string.delete"></outline>
					<outline text="string.insert"></outline>
					</outline>
				</outline>
			<outline text="string.popExtension">
				<outline text="Syntax">
					<outline text="string.popExtension (s)"></outline>
					</outline>
				<outline text="Params">
					<outline text="s is a string."></outline>
					</outline>
				<outline text="Returns">
					<outline text="If the string has an extension, like .txt or .png, we return the string without the extension."></outline>
					</outline>
				<outline text="Example">
					<outline text="string.popExtension (&quot;myAffadavit.txt&quot;)">
						<outline text="myAffadavit"></outline>
						</outline>
					</outline>
				<outline text="See also">
					<outline text="string.popLastField"></outline>
					<outline text="string.popTrailing"></outline>
					</outline>
				</outline>
			<outline text="string.popLastField">
				<outline text="Syntax">
					<outline text="string.popLastField (s, ch)"></outline>
					</outline>
				<outline text="Params">
					<outline text="s is a string, ch is a 1-character string."></outline>
					</outline>
				<outline text="Returns">
					<outline text="A string without the last field, as determined by the character, used as a delimiter."></outline>
					</outline>
				<outline text="Notes">
					<outline text="Useful if you want to replace the suffix of a file name with another suffix."></outline>
					</outline>
				<outline text="Examples">
					<outline text="string.popLastField (&quot;myDiary.html&quot;, &quot;.&quot;) + &quot;.json&quot;">
						<outline text="myDiary.json"></outline>
						</outline>
					<outline text="string.popLastField (&quot;scripting.com/2021/03/13&quot;, &quot;/&quot;)">
						<outline text="scripting.com/2021/03"></outline>
						</outline>
					</outline>
				<outline text="See also">
					<outline text="string.nthField"></outline>
					<outline text="string.countFields"></outline>
					<outline text="string.lastField"></outline>
					</outline>
				</outline>
			<outline text="string.popTrailing">
				<outline text="Syntax">
					<outline text="string.popTrailing (s, ch)"></outline>
					</outline>
				<outline text="Params">
					<outline text="s is a string, ch is a 1-character string."></outline>
					</outline>
				<outline text="Returns">
					<outline text="A string without instances of the character at the end of the string"></outline>
					</outline>
				<outline text="Example">
					<outline text="string.popTrailing (&quot;get rid of the dots please.........&quot;, &quot;.&quot;)">
						<outline text="get rid of the dots please"></outline>
						</outline>
					</outline>
				<outline text="See also">
					<outline text="string.popLastField"></outline>
					<outline text="string.popExtension"></outline>
					</outline>
				</outline>
			<outline text="string.randomSnarkySlogan">
				<outline text="Syntax">
					<outline text="string.randomSnarkySlogan ()"></outline>
					</outline>
				<outline text="Params">
					<outline text="None."></outline>
					</outline>
				<outline text="Returns">
					<outline text="A slogan from Dave's collection. "></outline>
					</outline>
				<outline text="Notes">
					<outline text="This is mostly for fun. Truthfully it's &lt;i&gt;only&lt;/i&gt; for fun. Heh. ;-)"></outline>
					</outline>
				<outline text="Examples">
					<outline text="string.randomSnarkySlogan ()">
						<outline text="People return to places that send them away."></outline>
						</outline>
					<outline text="string.randomSnarkySlogan ()">
						<outline text="This aggression will not stand."></outline>
						</outline>
					<outline text="string.randomSnarkySlogan ()">
						<outline text="All of this has happened before and all of this will happen again."></outline>
						</outline>
					<outline text="string.randomSnarkySlogan ()">
						<outline text="It's even worse than it appears."></outline>
						</outline>
					</outline>
				</outline>
			<outline text="string.replaceAll">
				<outline text="Syntax">
					<outline text="string.replaceAll (s, searchFor, replaceWith)"></outline>
					</outline>
				<outline text="Params">
					<outline text="All three parameters are strings."></outline>
					</outline>
				<outline text="Returns">
					<outline text="The result of replacing all occurrences of the second string with the third, in the first. "></outline>
					</outline>
				<outline text="Example">
					<outline text="string.replaceAll (&quot;raise your hand if you're happy&quot;, &quot; &quot;, &quot;---&quot;)">
						<outline text="raise---your---hand---if---you're---happy"></outline>
						</outline>
					</outline>
				<outline text="See also">
					<outline text="string.multipleReplaceAll"></outline>
					</outline>
				</outline>
			<outline text="string.stripMarkup">
				<outline text="Syntax">
					<outline text="string.stripMarkup (string)"></outline>
					</outline>
				<outline text="Params">
					<outline text="A string that might contain HTML markup."></outline>
					</outline>
				<outline text="Returns">
					<outline text="The string without the HTML markup."></outline>
					</outline>
				<outline text="Example">
					<outline text="string.stripMarkup (&quot;Sometimes &lt;b&gt;you&lt;/b&gt; don't &lt;i&gt;want&lt;/i&gt; the &lt;u&gt;markup&lt;/u&gt;.&quot;)">
						<outline text="Sometimes you don't want the markup."></outline>
						</outline>
					</outline>
				</outline>
			<outline text="string.trimLeading">
				<outline text="Syntax">
					<outline text="string.trimLeading (string, ch)"></outline>
					</outline>
				<outline text="Params">
					<outline text="First parameter is a string, the second parameter is a 1-character string. "></outline>
					</outline>
				<outline text="Returns">
					<outline text="The string without instances of the character at the beginning of the string. "></outline>
					</outline>
				<outline text="Example">
					<outline text="string.trimLeading (&quot;$$$$$We don't need the dollar signs at the beginning of this string.&quot;, &quot;$&quot;)">
						<outline text="We don't need the dollar signs at the beginning of this string."></outline>
						</outline>
					</outline>
				<outline text="See also">
					<outline text="string.trimTrailing"></outline>
					</outline>
				</outline>
			<outline text="string.trimTrailing">
				<outline text="Syntax">
					<outline text="string.trimTrailing (string, ch)"></outline>
					</outline>
				<outline text="Params">
					<outline text="First parameter is a string, the second parameter is a 1-character string. "></outline>
					</outline>
				<outline text="Returns">
					<outline text="The string without instances of the character at the end of the string. "></outline>
					</outline>
				<outline text="Example">
					<outline text="string.trimTrailing (&quot;We don't need the question marks at the end of this string.?????&quot;, &quot;?&quot;)">
						<outline text="We don't need the question marks at the end of this string."></outline>
						</outline>
					</outline>
				<outline text="See also">
					<outline text="string.trimLeading"></outline>
					</outline>
				</outline>
			<outline text="string.trimWhitespace">
				<outline text="Syntax">
					<outline text="string.trimWhitespace (string)"></outline>
					</outline>
				<outline text="Params">
					<outline text="A string that might have whitespace at the beginning and/or end."></outline>
					</outline>
				<outline text="Returns">
					<outline text="The string without whitespace characters at the beginning and end. "></outline>
					</outline>
				<outline text="Notes">
					<outline text="Use this verb to allow comparisons between names or identifiers that might have whitespace around them. "></outline>
					</outline>
				<outline text="Example">
					<outline text="string.trimWhitespace (&quot;  All the whitespace is a problem.    &quot;)">
						<outline text="All the whitespace is a problem."></outline>
						</outline>
					<outline text="string.trimWhitespace (&quot;   Alice   &quot;) == &quot;Alice&quot;">
						<outline text="true"></outline>
						</outline>
					</outline>
				<outline text="See also">
					<outline text="string.trimLeading"></outline>
					</outline>
				</outline>
			<outline text="string.upper">
				<outline text="Syntax">
					<outline text="string.upper (s) returns string"></outline>
					</outline>
				<outline text="What it does">
					<outline text="Converts the string to upper case. "></outline>
					</outline>
				<outline text="Returns">
					<outline text="The upper case version of the string."></outline>
					</outline>
				<outline text="Example">
					<outline text="dialog.alert (string.upper (&quot;It's even worse than it appears.&quot;))"></outline>
					</outline>
				<outline text="See also">
					<outline text="string.lower"></outline>
					</outline>
				</outline>
			</outline>
		<outline text="http verbs">
			<outline text="http.client">
				<outline text="Syntax">
					<outline text="http.client (options, boolean)"></outline>
					</outline>
				<outline text="Parameters">
					<outline text="options is a JavaScript structure that defines the request. "></outline>
					<outline text="boolean indicates whether it uses a proxy server (true) or the request is made from the browser (false)."></outline>
					</outline>
				<outline text="Returns">
					<outline text="What the HTTP request returns."></outline>
					</outline>
				<outline text="Breakage">
					<outline text="There will be breakage. If you want to use this now, be prepared to adjust your code later, and participate in the &lt;a href=&quot;https://github.com/scripting/drummerRFC/issues/6&quot;&gt;thread&lt;/a&gt; on the RFC site. As long as this alert is here, assume your apps that use this verb will break."></outline>
					</outline>
				<outline text="Notes">
					<outline text="This is meant to be a complete HTTP client that's accessible to Drummer programmers.  "></outline>
					<outline text="In its first release in November 2021, it is far from complete. But it gives you a lot more power than the simpler &lt;a href=&quot;http://docserver.scripting.com/?verb=http.readUrl&quot;&gt;http.readUrl&lt;/a&gt;. Most important probably is that http.client can do requests other than GET."></outline>
					<outline text="The options struct is what you would pass to a &lt;a href=&quot;https://www.w3schools.com/jquery/ajax_ajax.asp&quot;&gt;jQuery AJAX call&lt;/a&gt;. Here's a list of values it looks for: ">
						<outline text="type -- the HTTP method, such as GET, POST, HEAD. "></outline>
						<outline text="url -- the address the request is directed to"></outline>
						<outline text="data -- the data that is passed in the body of the request. "></outline>
						<outline text="params -- a JavaScript object containing the search params for the request. "></outline>
						</outline>
					<outline text="There's a new endpoint in &lt;a href=&quot;https://www.npmjs.com/package/daveappserver&quot;&gt;daveappserver&lt;/a&gt; that acts as the proxy server for this verb. It is deployed at drummer.scripting.com."></outline>
					<outline text="It's named after the Frontier verb &lt;a href=&quot;http://docserver.userland.com/tcp/httpClient&quot;&gt;tcp.httpClient&lt;/a&gt;, which had a very long param list. In this version I opted for a struct instead. The intention is to do all that the Frontier verb does in this verb, in Drummer."></outline>
					</outline>
				<outline text="Examples">
					<outline text="http.client ({url: &quot;http://drummer.scripting.com/now&quot;}, true)">
						<outline text="Fri Nov 05 2021 13:05:15 GMT-0400 (Eastern Daylight Time)"></outline>
						</outline>
					</outline>
				</outline>
			<outline text="http.readUrl">
				<outline text="Syntax">
					<outline text="http.readUrl (string, boolean)"></outline>
					</outline>
				<outline text="Parameters">
					<outline text="The string is the http address of the page you want to read. "></outline>
					<outline text="The boolean indicates whether you want to go through a proxy server for the request. It's optional, and it's default value is true."></outline>
					</outline>
				<outline text="Returns">
					<outline text="It makes an HTTP request and returns to the caller what the request returns. "></outline>
					</outline>
				<outline text="Notes">
					<outline text="If you want to access a resource on the local machine, or one that is inaccessible to drummer.scripting.com for some reason, you must not use the proxy server. "></outline>
					<outline text="If you can make the request without using the proxy server it will be faster, and conserves resources. "></outline>
					</outline>
				<outline text="Examples">
					<outline text="http.readUrl (&quot;http://scripting.com/rss.xml&quot;, false).length">
						<outline text="73700"></outline>
						</outline>
					<outline text="http.readUrl (&quot;http://scripting.com/rss.xml&quot;, false).length">
						<outline text="73700"></outline>
						</outline>
					<outline text="http.readUrl (&quot;http://localhost:1410/now&quot;, false)">
						<outline text="Mon Aug 09 2021 16:35:28 GMT-0400 (Eastern Daylight Time)"></outline>
						</outline>
					</outline>
				</outline>
			<outline text="http.derefUrl">
				<outline text="Syntax">
					<outline text="http.derefUrl (string)"></outline>
					</outline>
				<outline text="Parameters">
					<outline text="The string is a shortened http address. In other words and address that points to another address.  "></outline>
					</outline>
				<outline text="Returns">
					<outline text="If the address is not a shortened url, it returns the address itself. If it is, it returns the address that it points to."></outline>
					</outline>
				<outline text="Notes">
					<outline text="9/17/2021 by DW -- it does not work in the case that the address is not a shortened url. Not sure why, no time to investigate at this time. "></outline>
					</outline>
				<outline text="Examples">
					<outline text="http.derefUrl (&quot;https://tinyurl.com/yvfkvaps&quot;)">
						<outline text="http://scripting.com/"></outline>
						</outline>
					<outline text="http.derefUrl (&quot;https://scripting.com/&quot;)">
						<outline text="http://scripting.com/"></outline>
						</outline>
					</outline>
				</outline>
			</outline>
		</body>
	</opml>
