<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- OPML generated by OPML Editor v10.1b19 on Mon, 27 Mar 2023 21:45:04 GMT -->

<!-- 
   Hi this is Dave Winer. I write all my project code in an outliner, which 
   generates all the files that make up this GitHub project. You'll see a 
   source.opml file like this in each of my projects. It contains the outline 
   source that the repo files were generated from. This is the most logical place 
   to store them. You can read the code in any outliner that supports OPML, which 
   includes http://drummer.scripting.com. You can use the Open URL command in 
   Drummer's File menu to open the "raw" version of this file straight from the 
   GitHub repo.
 -->

<opml version="2.0">
	<head>
		<title>nodeEditor: belterCommandLine2</title>
		<dateCreated>Thu, 24 Feb 2022 13:51:42 GMT</dateCreated>
		<dateModified>Mon, 27 Mar 2023 21:45:04 GMT</dateModified>
		<ownerName>Dave Winer</ownerName>
		<ownerId>http://davewiner.com/</ownerId>
		<expansionState>1, 2, 3, 4, 5, 8, 16, 41, 74</expansionState>
		<vertScrollState>20</vertScrollState>
		<windowTop>82</windowTop>
		<windowLeft>986</windowLeft>
		<windowBottom>951</windowBottom>
		<windowRight>2027</windowRight>
		</head>
	<body>
		<outline text="/scripting.com/code/beltercommandline/">
			<outline text="worknotes.md" created="Sun, 26 Mar 2023 15:30:56 GMT">
				<outline text="#### 3/27/23; 5:25:03 PM by DW" created="Mon, 27 Mar 2023 21:25:02 GMT">
					<outline text="How the docs work" created="Mon, 27 Mar 2023 21:25:03 GMT">
						<outline text="We're just using DocServer app for now." created="Mon, 27 Mar 2023 21:25:07 GMT">
							<outline text="http://scripting.com/code/docserver/index.html?url=http://scripting.com/code/beltercommandline/verbdocs.opml" created="Mon, 27 Mar 2023 21:40:36 GMT"/>
							<outline text="The verbdocs outline is below." created="Mon, 27 Mar 2023 21:40:59 GMT"/>
							</outline>
						<outline text="We also want to have commands from belter that show you docs pages" created="Mon, 27 Mar 2023 21:43:07 GMT">
							<outline text="belt -docs &lt;verbname&gt;" created="Mon, 27 Mar 2023 21:43:19 GMT"/>
							</outline>
						</outline>
					</outline>
				<outline text="#### 3/27/23; 10:23:54 AM by DW" created="Mon, 27 Mar 2023 14:23:54 GMT">
					<outline text="How plugins work" created="Mon, 27 Mar 2023 14:23:55 GMT">
						<outline text="Add a .js file to the plugins folder." created="Mon, 27 Mar 2023 15:48:07 GMT"/>
						<outline text="It's a Node.js module. It can export whatever you like." created="Mon, 27 Mar 2023 15:48:17 GMT"/>
						<outline text="If the name of the file is montana, you refer to the plugin as plugins.montana." created="Mon, 27 Mar 2023 15:48:46 GMT"/>
						<outline text="If it exports a function called helena, you call it like: plugins.montana.helena (&quot;yo&quot;)" created="Mon, 27 Mar 2023 15:49:14 GMT"/>
						<outline text="Plugins are loaded before your script runs. " created="Mon, 27 Mar 2023 15:49:56 GMT"/>
						<outline text="That's pretty much all there is to it. " created="Mon, 27 Mar 2023 15:50:10 GMT"/>
						</outline>
					</outline>
				<outline text="#### 3/26/23; 11:31:01 AM by DW" created="Sun, 26 Mar 2023 15:31:00 GMT">
					<outline text="Add enough verbs to convert the OPML files from 2022 to text files for uploading to ChatGPT." created="Sun, 26 Mar 2023 15:31:01 GMT"/>
					</outline>
				</outline>
			<outline text="acorn.js" isComment="true" created="Tue, 21 Mar 2023 16:07:46 GMT">
				<outline text="[[http://scripting.com/publicfolder/code/jsParserForLO2/acorn.js]]"/>
				</outline>
			<outline text="verbdocs.opml" created="Mon, 27 Mar 2023 21:34:08 GMT">
				<outline text="string verbs">
					<outline text="string.addCommas">
						<outline text="Syntax">
							<outline text="string.addCommas (number)"/>
							</outline>
						<outline text="Params">
							<outline text="The param is a large number that can be made easier to read by adding commas to it."/>
							</outline>
						<outline text="Returns">
							<outline text="A string."/>
							</outline>
						<outline text="Examples">
							<outline text="string.addCommas (11709445200)">
								<outline text="11,709,445,200"/>
								</outline>
							<outline text="string.addCommas (12)">
								<outline text="12"/>
								</outline>
							<outline text="string.addCommas (&quot;abcdefghijklmnopqrstuvwxyz&quot;)">
								<outline text="abcdefghijklmnopqrstuvwxyz"/>
								</outline>
							</outline>
						</outline>
					<outline text="string.addPeriodAtEnd">
						<outline text="Syntax">
							<outline text="string.addPeriodAtEnd (string)"/>
							</outline>
						<outline text="Params">
							<outline text="string is a sentence that may not have a period at the end. "/>
							</outline>
						<outline text="Returns">
							<outline text="The string, possibly with a period added at the end. "/>
							</outline>
						<outline text="Notes">
							<outline text="It's a complicated and somewhat quirky algorithm. "/>
							<outline text="First we call string.trimWhitespace to remove any spaces or newlines at the beginning and end of the string."/>
							<outline text="Then, if the string ends with a period, comma, question mark, quote, colon, semicolon or exclamation point, we do nothing. Putting a period after these characters would usually be incorrect. "/>
							<outline text="Used in Radio3 to pre-process a linkblog post. "/>
							</outline>
						<outline text="Examples">
							<outline text="string.addPeriodAtEnd (&quot;I like ice cream&quot;)">
								<outline text="I like ice cream."/>
								</outline>
							<outline text="string.addPeriodAtEnd (&quot;What is your favorite flavor?&quot;)">
								<outline text="What is your favorite flavor?"/>
								</outline>
							</outline>
						</outline>
					<outline text="string.beginsWith">
						<outline text="Syntax">
							<outline text="string.beginsWith (s, possibleBeginning, flUnicase)"/>
							</outline>
						<outline text="Params">
							<outline text="The first param is a string that might begin with the second param."/>
							<outline text="flUnicase, a boolean, is optional. If true the search is done regardless of the case of the characters. If true the match doesn't have to be exact regarding the case of the characters, so &quot;hooray&quot; will match &quot;Hooray&quot; or &quot;hOOrAy&quot; if flUnicase is true."/>
							</outline>
						<outline text="Returns">
							<outline text="true if the string begins with the other, false if it doesn't."/>
							</outline>
						<outline text="Example">
							<outline text="string.beginsWith (&quot;hooray for hollywood&quot;, &quot;hoo&quot;)">
								<outline text="true"/>
								</outline>
							</outline>
						</outline>
					<outline text="string.bumpUrlString">
						<outline text="Syntax">
							<outline text="string.bumpUrlString (string)"/>
							</outline>
						<outline text="Params">
							<outline text="string either undefined or the result of having called string.bumpUrlString. "/>
							</outline>
						<outline text="Returns">
							<outline text="The next string in the sequence, as in a URL shortener application."/>
							</outline>
						<outline text="Notes">
							<outline text="The first string it returns is 1, then 2, then it runs through the alphabet. After z it returns 00, then 01."/>
							<outline text="It can be used in implementing a URL shortener, to generate a sequence of strings, that can be used as aliases for another perhaps longer string. "/>
							</outline>
						<outline text="Examples">
							<outline text="string.bumpUrlString (undefined)">
								<outline text="1"/>
								</outline>
							<outline text="string.bumpUrlString (&quot;z&quot;)">
								<outline text="00"/>
								</outline>
							<outline text="string.bumpUrlString (&quot;zz&quot;)">
								<outline text="000"/>
								</outline>
							<outline text="string.bumpUrlString (&quot;ZZ&quot;) //not case-sensitive">
								<outline text="000"/>
								</outline>
							</outline>
						</outline>
					<outline text="string.contains">
						<outline text="Syntax">
							<outline text="string.contains (s, whatItMightContain, flUnicase) returns boolean"/>
							</outline>
						<outline text="What it does">
							<outline text="Determines if one string contains another."/>
							<outline text="The third parameter, flUnicase, is optional, it defaults to true. "/>
							</outline>
						<outline text="Returns">
							<outline text="true if the string contains the other, false if it doesn't."/>
							</outline>
						<outline text="Example">
							<outline text="dialog.alert (string.contains (&quot;http://november.com&quot;, &quot;november&quot;)) //displays true"/>
							</outline>
						</outline>
					<outline text="string.countFields">
						<outline text="Syntax">
							<outline text="string.countFields (s, ch)"/>
							</outline>
						<outline text="Params">
							<outline text="s is a string, ch is a 1-character string."/>
							</outline>
						<outline text="Returns">
							<outline text="The number of fields in the string, with fields determined by the character."/>
							</outline>
						<outline text="Examples">
							<outline text="string.countFields (&quot;scripting.com/2003/08/12.html&quot;, &quot;/&quot;)">
								<outline text="4"/>
								</outline>
							<outline text="string.countFields (&quot;Do you know the way to San Jose?&quot;, &quot; &quot;)">
								<outline text="8"/>
								</outline>
							<outline text="string.countFields (&quot;Come hear Uncle John's Band.&quot;, &quot;/&quot;)">
								<outline text="1"/>
								</outline>
							</outline>
						<outline text="See also">
							<outline text="string.nthField"/>
							<outline text="string.lastField"/>
							</outline>
						</outline>
					<outline text="string.dayOfWeekToString">
						<outline text="Syntax">
							<outline text="string.dayOfWeekToString (number)"/>
							</outline>
						<outline text="Param">
							<outline text="A number between 0 and 6. 0 corresponds to Sunday, 6 to Saturday."/>
							</outline>
						<outline text="Returns">
							<outline text="A string like &quot;Sunday&quot;, &quot;Monday&quot;, &quot;Tuesday&quot;, &quot;Wednesday&quot;, &quot;Thursday&quot;, &quot;Friday&quot;, &quot;Saturday&quot; or the empty string. "/>
							</outline>
						<outline text="Errors">
							<outline text="If the number is out of range it returns the empty string."/>
							</outline>
						<outline text="Example">
							<outline text="string.dayOfWeekToString (3)">
								<outline text="Wednesday"/>
								</outline>
							</outline>
						<outline text="See also">
							<outline text="string.monthToString"/>
							</outline>
						</outline>
					<outline text="string.decodeXml">
						<outline text="Syntax">
							<outline text="string.decodeXml (string)"/>
							</outline>
						<outline text="Params">
							<outline text="A string that may include encoded XML."/>
							</outline>
						<outline text="Returns">
							<outline text="The decoded version of the string."/>
							</outline>
						<outline text="Notes">
							<outline text="We look for four strings: &amp;amp;lt; &amp;amp;gt; &amp;amp;amp; and &amp;amp;apos; and convert them to &lt; &gt; &amp; and '."/>
							<outline text="At some point it may make sense to look for other strings. "/>
							</outline>
						<outline text="Examples">
							<outline text="string.decodeXml (&quot;&amp;amp;lt;script&amp;amp;gt;&quot;)">
								<outline text="&amp;lt;script&gt;"/>
								</outline>
							<outline text="string.decodeXml (&quot;Lennon &amp;amp;amp; McCartney&quot;)">
								<outline text="Lennon &amp; McCartney"/>
								</outline>
							</outline>
						</outline>
					<outline text="string.delete">
						<outline text="Syntax">
							<outline text="string.delete (string, index, count)"/>
							</outline>
						<outline text="Params">
							<outline text="The first parameter is a string that you want to delete characters from. "/>
							<outline text="The second parameter is the 1-based location of the first character to delete."/>
							<outline text="The third parameter is the number of characters to delete."/>
							</outline>
						<outline text="Returns">
							<outline text="The result of deleting the characters from the string. "/>
							</outline>
						<outline text="Notes">
							<outline text="If you try to delete more characters than are present, it deletes as many as it can."/>
							<outline text="If you try to delete starting past the end of the string, you end up deleting nothing."/>
							</outline>
						<outline text="Example">
							<outline text="string.delete (&quot;123456789&quot;, 3, 1)">
								<outline text="12456789"/>
								</outline>
							<outline text="string.delete (&quot;123456789&quot;, 2, 1000)">
								<outline text="1"/>
								</outline>
							<outline text="string.delete (&quot;123456789&quot;, 100, 3)">
								<outline text="123456789"/>
								</outline>
							</outline>
						</outline>
					<outline text="string.encodeHtml">
						<outline text="Syntax">
							<outline text="string.encodeHtml (string)"/>
							</outline>
						<outline text="Params">
							<outline text="A string that possibly contains HTML markup. "/>
							</outline>
						<outline text="Returns">
							<outline text="The result of encoding angle brackets and quotes.  "/>
							</outline>
						<outline text="Notes">
							<outline text="If you try to delete more characters than are present, it deletes as many as it can."/>
							<outline text="If you try to delete starting past the end of the string, you end up deleting nothing."/>
							</outline>
						<outline text="Examples">
							<outline text="string.encodeHtml (&quot;Still diggin!&quot;)">
								<outline text="Still diggin!"/>
								</outline>
							<outline text="string.encodeHtml (&quot;I &lt;b&gt;love&lt;/b&gt; a parade&quot;)">
								<outline text="I &amp;#60;b&amp;#62;love&amp;#60;/b&amp;#62; a parade"/>
								</outline>
							</outline>
						</outline>
					<outline text="string.endsWith">
						<outline text="Syntax">
							<outline text="string.endsWith (string1, string2, boolean)"/>
							</outline>
						<outline text="Params">
							<outline text="The first string is the one we're looking in."/>
							<outline text="The second is what we're looking for in the string."/>
							<outline text="The boolean says if the search is unicase (it's optional, if not present it's true)."/>
							</outline>
						<outline text="Returns">
							<outline text="True if the first string ends with the second. "/>
							</outline>
						<outline text="Examples">
							<outline text="string.endsWith (&quot;Hooray for Hollywood&quot;, &quot;wood&quot;)">
								<outline text="true"/>
								</outline>
							<outline text="string.endsWith (&quot;Hooray for Hollywood&quot;, &quot;Wood&quot;, false)">
								<outline text="false"/>
								</outline>
							<outline text="string.endsWith (&quot;Hooray for Hollywood&quot;, &quot;wheat&quot;)">
								<outline text="false"/>
								</outline>
							</outline>
						</outline>
					<outline text="string.extensionToMimeType">
						<outline text="Syntax">
							<outline text="string.extensionToMimeType (string)"/>
							</outline>
						<outline text="Params">
							<outline text="The string is a path to a file."/>
							</outline>
						<outline text="Returns">
							<outline text="Returns a &lt;a href=&quot;https://en.wikipedia.org/wiki/Media_type#Common_examples_[10]&quot;&gt;media type&lt;/a&gt; corresponding to the extension of the file. "/>
							<outline text="For example, if the extension is .html, it returns text/html. "/>
							<outline text="If there is no extension or the extension isn't recognized, it returns undefined."/>
							</outline>
						<outline text="Note">
							<outline text="string.extensionToMimeType calls the &lt;a href=&quot;https://github.com/scripting/utils/blob/master/daveutils.js#L1182&quot;&gt;daveutils&lt;/a&gt; function httpExt2MIME. "/>
							</outline>
						<outline text="Examples">
							<outline text="string.extensionToMimeType (&quot;ideas.html&quot;)">
								<outline text="text/html"/>
								</outline>
							<outline text="string.extensionToMimeType (&quot;config.json&quot;)">
								<outline text="application/json"/>
								</outline>
							<outline text="string.extensionToMimeType (&quot;config.js&quot;)">
								<outline text="application/javascript"/>
								</outline>
							<outline text="string.extensionToMimeType (&quot;profile.png&quot;)">
								<outline text="image/png"/>
								</outline>
							<outline text="string.extensionToMimeType (&quot;profile.jpg&quot;)">
								<outline text="image/jpeg"/>
								</outline>
							</outline>
						</outline>
					<outline text="string.filledString">
						<outline text="Syntax">
							<outline text="string.filledString (character, count)"/>
							</outline>
						<outline text="Params">
							<outline text="The first parameter is a string which will be replicated."/>
							<outline text="The second parameter is the number of times it will be replicated."/>
							</outline>
						<outline text="Returns">
							<outline text="A string containing a number of copies of the first parameter. "/>
							</outline>
						<outline text="Examples">
							<outline text="string.filledString (&quot;p&quot;, 10)">
								<outline text="pppppppppp"/>
								</outline>
							<outline text="string.filledString (&quot;123 &quot;, 10)">
								<outline text="123 123 123 123 123 123 123 123 123 123 "/>
								</outline>
							<outline text="string.filledString (&quot;\t&quot;, 3)">
								<outline text="   "/>
								</outline>
							</outline>
						</outline>
					<outline text="string.formatDate">
						<outline text="Syntax">
							<outline text="string.formatDate (date, format, timezone)"/>
							</outline>
						<outline text="Params">
							<outline text="The first parameter is a JavaScript date object. "/>
							<outline text="The second parameter is a string containing a format spec, following &lt;a href=&quot;https://man7.org/linux/man-pages/man3/strftime.3.html&quot;&gt;strftime&lt;/a&gt; standard."/>
							<outline text="The third parameter says what timezone you want the date to be in. 0 is GMT, -4 in US/Eastern. "/>
							</outline>
						<outline text="Returns">
							<outline text="A string, representing the date, in the format specified, in the indicated timezone."/>
							</outline>
						<outline text="Notes">
							<outline text="All three parameters are optional."/>
							<outline text="If the date is not specified, the current date-time is used."/>
							<outline text="If the format is not specified, we use &quot;%c&quot;."/>
							<outline text="If the timezone is not specified, we use the timezone that the machine that ran the script is in."/>
							</outline>
						<outline text="Examples">
							<outline text="string.formatDate (clock.now (), &quot;%B&quot;)">
								<outline text="March"/>
								</outline>
							<outline text="string.formatDate ()">
								<outline text="Sun Mar 14 2021 11:24:53 GMT-0400 (Eastern Daylight Time)"/>
								</outline>
							<outline text="string.formatDate (clock.now (), &quot;%l:%M %p&quot;)">
								<outline text="11:21 AM"/>
								</outline>
							<outline text="string.formatDate (undefined, &quot;%A, %B %e, %Y at %l:%M %p&quot;) + &quot;.&quot;">
								<outline text="Sunday, March 14, 2021 at 11:27 AM."/>
								</outline>
							</outline>
						</outline>
					<outline text="string.getRandomPassword">
						<outline text="Syntax">
							<outline text="string.getRandomPassword (count)"/>
							</outline>
						<outline text="Params">
							<outline text="count is the number of characters that will be in the random string that's generated."/>
							</outline>
						<outline text="Returns">
							<outline text="A string of random characters."/>
							</outline>
						<outline text="Examples">
							<outline text="string.getRandomPassword (20)">
								<outline text="26mxjiulbv2br8jaeutj"/>
								</outline>
							<outline text="string.getRandomPassword (20)">
								<outline text="pv8snpjvmbl4np4kh4mt"/>
								</outline>
							</outline>
						</outline>
					<outline text="string.hashMD5">
						<outline text="Syntax">
							<outline text="string.hashMD5 (string)"/>
							</outline>
						<outline text="Params">
							<outline text="The string is the input to the &lt;a href=&quot;https://en.wikipedia.org/wiki/MD5&quot;&gt;MD5 encryption&lt;/a&gt; algorithm."/>
							</outline>
						<outline text="Returns">
							<outline text="The encrypted version of the string. "/>
							</outline>
						<outline text="Notes">
							<outline text="You can tell with a lot of confidence that the sender who uses this function has a copy of the string without transmitting it. "/>
							</outline>
						<outline text="Examples">
							<outline text="string.hashMD5 (&quot;Spring forward, fall back.&quot;)">
								<outline text="26d37b732af2a3caf47a0b2c9789a0ce"/>
								</outline>
							<outline text="string.hashMD5 (&quot;It's even worse than it appears&quot;)">
								<outline text="d7adfe509535ad6de49a8baf0fbf7a3d"/>
								</outline>
							</outline>
						</outline>
					<outline text="string.innerCaseName">
						<outline text="Syntax">
							<outline text="string.innerCaseName (string)"/>
							</outline>
						<outline text="Params">
							<outline text="A string that contains words separated by spaces. "/>
							</outline>
						<outline text="Returns">
							<outline text="The innerCase version of the string, which means capitalize the first letter after every space, then remove the spaces."/>
							</outline>
						<outline text="Notes">
							<outline text="It's useful for creating a file name or URL from a title. "/>
							</outline>
						<outline text="Examples">
							<outline text="string.innerCaseName (&quot;The story of my life&quot;) + &quot;.mp3&quot;">
								<outline text="theStoryOfMyLife.mp3"/>
								</outline>
							</outline>
						</outline>
					<outline text="string.insert">
						<outline text="Syntax">
							<outline text="string.insert (source, dest, ix)"/>
							</outline>
						<outline text="Params">
							<outline text="source is a string that will be inserted into dest, also a string, and the 1-based index ix."/>
							</outline>
						<outline text="Returns">
							<outline text="The result of the insertion."/>
							</outline>
						<outline text="Bugs">
							<outline text="Behavior is unpredictable if ix is less than zero. "/>
							</outline>
						<outline text="Examples">
							<outline text="string.insert (&quot;Bull &quot;, &quot;My name is Mancuso.&quot;, 11)">
								<outline text="My name is Bull Mancuso."/>
								</outline>
							<outline text="string.insert (&quot;Hello &quot;, &quot; from Hollywood&quot;, 1)">
								<outline text=" Hello from Hollywood"/>
								</outline>
							</outline>
						</outline>
					<outline text="string.isAlpha">
						<outline text="Syntax">
							<outline text="string.isAlpha (ch)"/>
							</outline>
						<outline text="Params">
							<outline text="ch is a 1-character string."/>
							</outline>
						<outline text="Returns">
							<outline text="True if it's an alphabetic character, false otherwise."/>
							<outline text="Alphabetic characters are A-Z and a-z."/>
							</outline>
						<outline text="Notes">
							<outline text="If the string is longer than one character, it returns true if the first character is alphabetic, false otherwise."/>
							</outline>
						<outline text="Examples">
							<outline text="string.isAlpha (&quot;x&quot;)">
								<outline text="true"/>
								</outline>
							<outline text="string.isAlpha (&quot;1&quot;)">
								<outline text="false"/>
								</outline>
							<outline text="string.isAlpha (&quot;#&quot;)">
								<outline text="false"/>
								</outline>
							<outline text="string.isAlpha (&quot;123abc&quot;)">
								<outline text="false"/>
								</outline>
							</outline>
						<outline text="See also">
							<outline text="string.isNumeric"/>
							<outline text="string.isWhitespace"/>
							<outline text="string.isPunctuation"/>
							</outline>
						</outline>
					<outline text="string.isNumeric">
						<outline text="Syntax">
							<outline text="string.isNumeric (ch)"/>
							</outline>
						<outline text="Params">
							<outline text="ch is a 1-character string."/>
							</outline>
						<outline text="Returns">
							<outline text="True if it's a numeric character, false otherwise."/>
							<outline text="Numeric characters are 0-9."/>
							</outline>
						<outline text="Notes">
							<outline text="If the string is longer than one character, it returns true if the first character is numeric, false otherwise."/>
							</outline>
						<outline text="Examples">
							<outline text="string.isNumeric (&quot;4&quot;)">
								<outline text="true"/>
								</outline>
							<outline text="string.isNumeric (&quot;g&quot;)">
								<outline text="false"/>
								</outline>
							<outline text="string.isNumeric (&quot;#&quot;)">
								<outline text="false"/>
								</outline>
							<outline text="string.isNumeric (&quot;123abc&quot;)">
								<outline text="true"/>
								</outline>
							</outline>
						<outline text="See also">
							<outline text="string.isAlpha"/>
							<outline text="string.isWhitespace"/>
							<outline text="string.isPunctuation"/>
							</outline>
						</outline>
					<outline text="string.isPunctuation">
						<outline text="Syntax">
							<outline text="string.isPunctuation (ch)"/>
							</outline>
						<outline text="Params">
							<outline text="ch is a 1-character string."/>
							</outline>
						<outline text="Returns">
							<outline text="True if it's a punctuation character, false otherwise."/>
							<outline text="Punctuation characters all characters that are not alpha, numeric or whitespace characters."/>
							</outline>
						<outline text="Notes">
							<outline text="If the string is longer than one character, it returns true if the first character is numeric, false otherwise."/>
							<outline text="This function can in some cases be used to see if you need to add a period at the end of a sentence. "/>
							</outline>
						<outline text="Bugs">
							<outline text="Admittedly, its definition is weird, it would probably be better to enumerate the characters that are punctuation, for example, period, comma, colon, semicolon. "/>
							</outline>
						<outline text="Examples">
							<outline text="string.isPunctuation (&quot; &quot;)">
								<outline text="false"/>
								</outline>
							<outline text="string.isPunctuation (&quot;.&quot;)">
								<outline text="true"/>
								</outline>
							<outline text="string.isPunctuation (&quot;,&quot;)">
								<outline text="true"/>
								</outline>
							</outline>
						<outline text="See also">
							<outline text="string.isAlpha"/>
							<outline text="string.isWhitespace"/>
							<outline text="string.isNumeric"/>
							<outline text="string.isPunctuation"/>
							<outline text="string.trimWhitespace"/>
							</outline>
						</outline>
					<outline text="string.isWhitespace">
						<outline text="Syntax">
							<outline text="string.isWhitespace (ch)"/>
							</outline>
						<outline text="Params">
							<outline text="ch is a 1-character string."/>
							</outline>
						<outline text="Returns">
							<outline text="True if it's a whitespace character, false otherwise."/>
							<outline text="Whitespace characters are &quot; &quot;, &quot;\r&quot;, &quot;\n&quot;, &quot;\t&quot; (i.e. blank, return, newline and tab)."/>
							</outline>
						<outline text="Notes">
							<outline text="If the string is longer than one character, it returns true if the first character is numeric, false otherwise."/>
							</outline>
						<outline text="Examples">
							<outline text="string.isWhitespace (&quot; &quot;)">
								<outline text="true"/>
								</outline>
							<outline text="string.isWhitespace (&quot;\n&quot;)">
								<outline text="true"/>
								</outline>
							<outline text="string.isWhitespace (&quot;*&quot;)">
								<outline text="false"/>
								</outline>
							</outline>
						<outline text="See also">
							<outline text="string.isAlpha"/>
							<outline text="string.isWhitespace"/>
							<outline text="string.isNumeric"/>
							<outline text="string.isPunctuation"/>
							<outline text="string.trimWhitespace"/>
							</outline>
						</outline>
					<outline text="string.lastField">
						<outline text="Syntax">
							<outline text="string.lastField (s, ch)"/>
							</outline>
						<outline text="Params">
							<outline text="s is a string, ch is a 1-character string."/>
							</outline>
						<outline text="Returns">
							<outline text="A string with the contents of the last specified field in the string, with fields determined by the character."/>
							<outline text="If ch doesn't appear in the string, it returns the whole string."/>
							</outline>
						<outline text="Bugs">
							<outline text="If ch contains more than one character, the results are not easily specified."/>
							</outline>
						<outline text="Examples">
							<outline text="string.lastField (&quot;scripting.com/2003/08/12.html&quot;, &quot;/&quot;)">
								<outline text="12.html"/>
								</outline>
							<outline text="string.lastField (&quot;oh the buzzing of the bees&quot;, &quot; &quot;)">
								<outline text="bees"/>
								</outline>
							<outline text="string.lastField (&quot;oh the buzzing of the bees&quot;, &quot;123&quot;)">
								<outline text="oh the buzzing of the bees"/>
								</outline>
							</outline>
						<outline text="See also">
							<outline text="string.nthField"/>
							<outline text="string.countFields"/>
							</outline>
						</outline>
					<outline text="string.lower">
						<outline text="Syntax">
							<outline text="string.lower (s) returns string"/>
							</outline>
						<outline text="What it does">
							<outline text="Converts the string to lower case. "/>
							</outline>
						<outline text="Returns">
							<outline text="The lower case version of the string."/>
							</outline>
						<outline text="Example">
							<outline text="dialog.alert (string.lower (&quot;Everyone Do The Hamster Dance!&quot;))"/>
							</outline>
						<outline text="See also">
							<outline text="string.upper"/>
							</outline>
						</outline>
					<outline text="string.maxStringLength">
						<outline text="Syntax">
							<outline text="string.maxStringLength (string, maxlength, flWholeWordAtEnd, flAddElipses)"/>
							</outline>
						<outline text="Params">
							<outline text="The first parameter is a string that you want to be sure isn't longer than the number in the second parameter."/>
							<outline text="flWholeWordAtEnd is an optional boolean param. If true, we don't leave a broken word at the end of the string. Defaults to true. "/>
							<outline text="flAddElipses is an optional boolean. If true, we add three periods at the end of the string. Defaults to true."/>
							</outline>
						<outline text="Returns">
							<outline text="A string that is not longer than the indicated length."/>
							</outline>
						<outline text="Examples">
							<outline text="string.maxStringLength (&quot;I have a long story I would like to tell you. It begins like this.&quot;, 35)">
								<outline text="I have a long story I would like ..."/>
								</outline>
							<outline text="string.maxStringLength (&quot;You know nothing Jon Snow.&quot; , 80)">
								<outline text="You know nothing Jon Snow."/>
								</outline>
							</outline>
						</outline>
					<outline text="string.markdownProcess">
						<outline text="Syntax">
							<outline text="string.markdownProcess (string)"/>
							</outline>
						<outline text="Params">
							<outline text="The string contains markdown text that you want to be converted to HTML."/>
							</outline>
						<outline text="Returns">
							<outline text="The HTML rendering of the string."/>
							</outline>
						<outline text="Notes">
							<outline text="We use &lt;a href=&quot;https://github.com/StackExchange/pagedown&quot;&gt;Pagedown&lt;/a&gt;, the Markdown processor used on Stack Exchange. "/>
							</outline>
						<outline text="Examples">
							<outline text="string.markdownProcess (&quot;It's **even** worse than it appears.&quot;)">
								<outline text="&lt;p&gt;It's &lt;strong&gt;even&lt;/strong&gt; worse than it appears.&lt;/p&gt;"/>
								</outline>
							<outline text="string.markdownProcess (&quot;I read [Scripting News](http://scripting.com/).&quot;)">
								<outline text="&lt;p&gt;I read &lt;a href=&quot;http://scripting.com/&quot;&gt;Scripting News&lt;/a&gt;.&lt;/p&gt;"/>
								</outline>
							<outline text="string.markdownProcess (&quot;* one\n* two\n* three\n&quot;)">
								<outline text="&lt;ul&gt;">
									<outline text="&lt;li&gt;one&lt;/li&gt;"/>
									<outline text="&lt;li&gt;two&lt;/li&gt;"/>
									<outline text="&lt;li&gt;three&lt;/li&gt;"/>
									<outline text="&lt;/ul&gt;"/>
									</outline>
								</outline>
							</outline>
						</outline>
					<outline text="string.mid">
						<outline text="Syntax">
							<outline text="string.mid (string, ix, ct)"/>
							</outline>
						<outline text="Params">
							<outline text="The first parameter is a string that you want to get characters from. "/>
							<outline text="The second parameter is the 1-based location of the first character to copy."/>
							<outline text="The third parameter is the number of characters to copy."/>
							</outline>
						<outline text="Returns">
							<outline text="The result of extracting the characters from the string. "/>
							</outline>
						<outline text="Notes">
							<outline text="If you try to delete copy characters than are present, it copies as many as it can."/>
							<outline text="If you try to copy starting past the end of the string, you end up copying nothing."/>
							</outline>
						<outline text="Example">
							<outline text="string.mid (&quot;123456789&quot;, 3, 1)">
								<outline text="3"/>
								</outline>
							<outline text="string.mid (&quot;123456789&quot;, 2, 1000)">
								<outline text="23456789"/>
								</outline>
							</outline>
						<outline text="See also">
							<outline text="string.delete"/>
							<outline text="string.insert"/>
							</outline>
						</outline>
					<outline text="string.monthToString">
						<outline text="Syntax">
							<outline text="string.monthToString (number)"/>
							</outline>
						<outline text="Param">
							<outline text="A number between 0 and 11. 0 corresponds to January, 11 to December."/>
							</outline>
						<outline text="Returns">
							<outline text="A string like &quot;January&quot;, &quot;February&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot;June&quot;, &quot;July&quot;, &quot;August&quot;, &quot;September&quot;, &quot;October&quot;, &quot;November&quot;, &quot;December&quot; or undefined. "/>
							</outline>
						<outline text="Examples">
							<outline text="string.monthToString (0)">
								<outline text="January"/>
								</outline>
							<outline text="string.monthToString (100)">
								<outline text="undefined"/>
								</outline>
							</outline>
						<outline text="See also">
							<outline text="string.dayOfWeekToString"/>
							</outline>
						</outline>
					<outline text="string.multipleReplaceAll">
						<outline text="Syntax">
							<outline text="string.multipleReplaceAll (s, replaceTable, flCaseSensitive, startCharacters, endCharacters)"/>
							</outline>
						<outline text="Params">
							<outline text="s is a string."/>
							<outline text="replaceTable is an object, where the name of each property is a string to search for, and its value is what you want it replaced with. "/>
							<outline text="flCaseSensitive, a boolean, determines if the search is case-sensitive. It's optional, if undefined, it defaults to false. "/>
							<outline text="startCharacters is an optional string, if specified we only look at text within the first string that begins with these characters."/>
							<outline text="endCharacters, also optional, if specified, we only look at text within the first string that ends with these characters."/>
							</outline>
						<outline text="Returns">
							<outline text="A string, the result of the replacements."/>
							</outline>
						<outline text="Example">
							<outline text="string.multipleReplaceAll (&quot;This house costs $293,000.&quot;, {&quot;house&quot;: &quot;apartment&quot;, &quot;293,000&quot;: &quot;534,287&quot;}) ">
								<outline text="This apartment costs $534,287."/>
								</outline>
							</outline>
						<outline text="See also">
							<outline text="string.replaceAll"/>
							</outline>
						</outline>
					<outline text="string.nthField">
						<outline text="Syntax">
							<outline text="string.nthField (s, ch, n)"/>
							</outline>
						<outline text="Params">
							<outline text="s is a string, ch is a 1-character string, n is a number."/>
							<outline text="n is 1-based, i.e. the first field is 1, not 0."/>
							</outline>
						<outline text="Returns">
							<outline text="A string with the contents of the specified field, with fields determined by the character."/>
							</outline>
						<outline text="Example">
							<outline text="string.nthField (&quot;scripting.com/2003/08/12.html&quot;, &quot;/&quot;, 3)">
								<outline text="08"/>
								</outline>
							</outline>
						<outline text="See also">
							<outline text="string.lastField"/>
							<outline text="string.countFields"/>
							</outline>
						</outline>
					<outline text="string.padWithZeros">
						<outline text="Syntax">
							<outline text="string.padWithZeros (number, ct)"/>
							</outline>
						<outline text="Params">
							<outline text="number is a number you want padded with zeros."/>
							<outline text="ct is the number of places you want the number padded to."/>
							</outline>
						<outline text="Returns">
							<outline text="The padded version of the number as a string."/>
							</outline>
						<outline text="Notes">
							<outline text="It's useful if you want all strings produced by the code to be the same length, regardless how large the numbers are."/>
							</outline>
						<outline text="Examples">
							<outline text="string.padWithZeros (1200, 5)">
								<outline text="01200"/>
								</outline>
							<outline text="string.padWithZeros (1, 4) + &quot;.html&quot;">
								<outline text="0001.html"/>
								</outline>
							</outline>
						<outline text="See also">
							<outline text="string.delete"/>
							<outline text="string.insert"/>
							</outline>
						</outline>
					<outline text="string.popExtension">
						<outline text="Syntax">
							<outline text="string.popExtension (s)"/>
							</outline>
						<outline text="Params">
							<outline text="s is a string."/>
							</outline>
						<outline text="Returns">
							<outline text="If the string has an extension, like .txt or .png, we return the string without the extension."/>
							</outline>
						<outline text="Example">
							<outline text="string.popExtension (&quot;myAffadavit.txt&quot;)">
								<outline text="myAffadavit"/>
								</outline>
							</outline>
						<outline text="See also">
							<outline text="string.popLastField"/>
							<outline text="string.popTrailing"/>
							</outline>
						</outline>
					<outline text="string.popLastField">
						<outline text="Syntax">
							<outline text="string.popLastField (s, ch)"/>
							</outline>
						<outline text="Params">
							<outline text="s is a string, ch is a 1-character string."/>
							</outline>
						<outline text="Returns">
							<outline text="A string without the last field, as determined by the character, used as a delimiter."/>
							</outline>
						<outline text="Notes">
							<outline text="Useful if you want to replace the suffix of a file name with another suffix."/>
							</outline>
						<outline text="Examples">
							<outline text="string.popLastField (&quot;myDiary.html&quot;, &quot;.&quot;) + &quot;.json&quot;">
								<outline text="myDiary.json"/>
								</outline>
							<outline text="string.popLastField (&quot;scripting.com/2021/03/13&quot;, &quot;/&quot;)">
								<outline text="scripting.com/2021/03"/>
								</outline>
							</outline>
						<outline text="See also">
							<outline text="string.nthField"/>
							<outline text="string.countFields"/>
							<outline text="string.lastField"/>
							</outline>
						</outline>
					<outline text="string.popTrailing">
						<outline text="Syntax">
							<outline text="string.popTrailing (s, ch)"/>
							</outline>
						<outline text="Params">
							<outline text="s is a string, ch is a 1-character string."/>
							</outline>
						<outline text="Returns">
							<outline text="A string without instances of the character at the end of the string"/>
							</outline>
						<outline text="Example">
							<outline text="string.popTrailing (&quot;get rid of the dots please.........&quot;, &quot;.&quot;)">
								<outline text="get rid of the dots please"/>
								</outline>
							</outline>
						<outline text="See also">
							<outline text="string.popLastField"/>
							<outline text="string.popExtension"/>
							</outline>
						</outline>
					<outline text="string.randomSnarkySlogan">
						<outline text="Syntax">
							<outline text="string.randomSnarkySlogan ()"/>
							</outline>
						<outline text="Params">
							<outline text="None."/>
							</outline>
						<outline text="Returns">
							<outline text="A slogan from Dave's collection. "/>
							</outline>
						<outline text="Notes">
							<outline text="This is mostly for fun. Truthfully it's &lt;i&gt;only&lt;/i&gt; for fun. Heh. ;-)"/>
							</outline>
						<outline text="Examples">
							<outline text="string.randomSnarkySlogan ()">
								<outline text="People return to places that send them away."/>
								</outline>
							<outline text="string.randomSnarkySlogan ()">
								<outline text="This aggression will not stand."/>
								</outline>
							<outline text="string.randomSnarkySlogan ()">
								<outline text="All of this has happened before and all of this will happen again."/>
								</outline>
							<outline text="string.randomSnarkySlogan ()">
								<outline text="It's even worse than it appears."/>
								</outline>
							</outline>
						</outline>
					<outline text="string.replaceAll">
						<outline text="Syntax">
							<outline text="string.replaceAll (s, searchFor, replaceWith)"/>
							</outline>
						<outline text="Params">
							<outline text="All three parameters are strings."/>
							</outline>
						<outline text="Returns">
							<outline text="The result of replacing all occurrences of the second string with the third, in the first. "/>
							</outline>
						<outline text="Example">
							<outline text="string.replaceAll (&quot;raise your hand if you're happy&quot;, &quot; &quot;, &quot;---&quot;)">
								<outline text="raise---your---hand---if---you're---happy"/>
								</outline>
							</outline>
						<outline text="See also">
							<outline text="string.multipleReplaceAll"/>
							</outline>
						</outline>
					<outline text="string.stripMarkup">
						<outline text="Syntax">
							<outline text="string.stripMarkup (string)"/>
							</outline>
						<outline text="Params">
							<outline text="A string that might contain HTML markup."/>
							</outline>
						<outline text="Returns">
							<outline text="The string without the HTML markup."/>
							</outline>
						<outline text="Example">
							<outline text="string.stripMarkup (&quot;Sometimes &lt;b&gt;you&lt;/b&gt; don't &lt;i&gt;want&lt;/i&gt; the &lt;u&gt;markup&lt;/u&gt;.&quot;)">
								<outline text="Sometimes you don't want the markup."/>
								</outline>
							</outline>
						</outline>
					<outline text="string.trimLeading">
						<outline text="Syntax">
							<outline text="string.trimLeading (string, ch)"/>
							</outline>
						<outline text="Params">
							<outline text="First parameter is a string, the second parameter is a 1-character string. "/>
							</outline>
						<outline text="Returns">
							<outline text="The string without instances of the character at the beginning of the string. "/>
							</outline>
						<outline text="Example">
							<outline text="string.trimLeading (&quot;$$$$$We don't need the dollar signs at the beginning of this string.&quot;, &quot;$&quot;)">
								<outline text="We don't need the dollar signs at the beginning of this string."/>
								</outline>
							</outline>
						<outline text="See also">
							<outline text="string.trimTrailing"/>
							</outline>
						</outline>
					<outline text="string.trimTrailing">
						<outline text="Syntax">
							<outline text="string.trimTrailing (string, ch)"/>
							</outline>
						<outline text="Params">
							<outline text="First parameter is a string, the second parameter is a 1-character string. "/>
							</outline>
						<outline text="Returns">
							<outline text="The string without instances of the character at the end of the string. "/>
							</outline>
						<outline text="Example">
							<outline text="string.trimTrailing (&quot;We don't need the question marks at the end of this string.?????&quot;, &quot;?&quot;)">
								<outline text="We don't need the question marks at the end of this string."/>
								</outline>
							</outline>
						<outline text="See also">
							<outline text="string.trimLeading"/>
							</outline>
						</outline>
					<outline text="string.trimWhitespace">
						<outline text="Syntax">
							<outline text="string.trimWhitespace (string)"/>
							</outline>
						<outline text="Params">
							<outline text="A string that might have whitespace at the beginning and/or end."/>
							</outline>
						<outline text="Returns">
							<outline text="The string without whitespace characters at the beginning and end. "/>
							</outline>
						<outline text="Notes">
							<outline text="Use this verb to allow comparisons between names or identifiers that might have whitespace around them. "/>
							</outline>
						<outline text="Example">
							<outline text="string.trimWhitespace (&quot;  All the whitespace is a problem.    &quot;)">
								<outline text="All the whitespace is a problem."/>
								</outline>
							<outline text="string.trimWhitespace (&quot;   Alice   &quot;) == &quot;Alice&quot;">
								<outline text="true"/>
								</outline>
							</outline>
						<outline text="See also">
							<outline text="string.trimLeading"/>
							</outline>
						</outline>
					<outline text="string.upper">
						<outline text="Syntax">
							<outline text="string.upper (s) returns string"/>
							</outline>
						<outline text="What it does">
							<outline text="Converts the string to upper case. "/>
							</outline>
						<outline text="Returns">
							<outline text="The upper case version of the string."/>
							</outline>
						<outline text="Example">
							<outline text="dialog.alert (string.upper (&quot;It's even worse than it appears.&quot;))"/>
							</outline>
						<outline text="See also">
							<outline text="string.lower"/>
							</outline>
						</outline>
					</outline>
				<outline text="http verbs">
					<outline text="http.client">
						<outline text="Syntax">
							<outline text="http.client (options, boolean)"/>
							</outline>
						<outline text="Parameters">
							<outline text="options is a JavaScript structure that defines the request. "/>
							<outline text="boolean indicates whether it uses a proxy server (true) or the request is made from the browser (false)."/>
							</outline>
						<outline text="Returns">
							<outline text="What the HTTP request returns."/>
							</outline>
						<outline text="Breakage">
							<outline text="There will be breakage. If you want to use this now, be prepared to adjust your code later, and participate in the &lt;a href=&quot;https://github.com/scripting/drummerRFC/issues/6&quot;&gt;thread&lt;/a&gt; on the RFC site. As long as this alert is here, assume your apps that use this verb will break."/>
							</outline>
						<outline text="Notes">
							<outline text="This is meant to be a complete HTTP client that's accessible to Drummer programmers.  "/>
							<outline text="In its first release in November 2021, it is far from complete. But it gives you a lot more power than the simpler &lt;a href=&quot;http://docserver.scripting.com/?verb=http.readUrl&quot;&gt;http.readUrl&lt;/a&gt;. Most important probably is that http.client can do requests other than GET."/>
							<outline text="The options struct is what you would pass to a &lt;a href=&quot;https://www.w3schools.com/jquery/ajax_ajax.asp&quot;&gt;jQuery AJAX call&lt;/a&gt;. Here's a list of values it looks for: ">
								<outline text="type -- the HTTP method, such as GET, POST, HEAD. "/>
								<outline text="url -- the address the request is directed to"/>
								<outline text="data -- the data that is passed in the body of the request. "/>
								<outline text="params -- a JavaScript object containing the search params for the request. "/>
								</outline>
							<outline text="There's a new endpoint in &lt;a href=&quot;https://www.npmjs.com/package/daveappserver&quot;&gt;daveappserver&lt;/a&gt; that acts as the proxy server for this verb. It is deployed at drummer.scripting.com."/>
							<outline text="It's named after the Frontier verb &lt;a href=&quot;http://docserver.userland.com/tcp/httpClient&quot;&gt;tcp.httpClient&lt;/a&gt;, which had a very long param list. In this version I opted for a struct instead. The intention is to do all that the Frontier verb does in this verb, in Drummer."/>
							</outline>
						<outline text="Examples">
							<outline text="http.client ({url: &quot;http://drummer.scripting.com/now&quot;}, true)">
								<outline text="Fri Nov 05 2021 13:05:15 GMT-0400 (Eastern Daylight Time)"/>
								</outline>
							</outline>
						</outline>
					<outline text="http.readUrl">
						<outline text="Syntax">
							<outline text="http.readUrl (string, boolean)"/>
							</outline>
						<outline text="Parameters">
							<outline text="The string is the http address of the page you want to read. "/>
							<outline text="The boolean indicates whether you want to go through a proxy server for the request. It's optional, and it's default value is true."/>
							</outline>
						<outline text="Returns">
							<outline text="It makes an HTTP request and returns to the caller what the request returns. "/>
							</outline>
						<outline text="Notes">
							<outline text="If you want to access a resource on the local machine, or one that is inaccessible to drummer.scripting.com for some reason, you must not use the proxy server. "/>
							<outline text="If you can make the request without using the proxy server it will be faster, and conserves resources. "/>
							</outline>
						<outline text="Examples">
							<outline text="http.readUrl (&quot;http://scripting.com/rss.xml&quot;, false).length">
								<outline text="73700"/>
								</outline>
							<outline text="http.readUrl (&quot;http://scripting.com/rss.xml&quot;, false).length">
								<outline text="73700"/>
								</outline>
							<outline text="http.readUrl (&quot;http://localhost:1410/now&quot;, false)">
								<outline text="Mon Aug 09 2021 16:35:28 GMT-0400 (Eastern Daylight Time)"/>
								</outline>
							</outline>
						</outline>
					<outline text="http.derefUrl">
						<outline text="Syntax">
							<outline text="http.derefUrl (string)"/>
							</outline>
						<outline text="Parameters">
							<outline text="The string is a shortened http address. In other words and address that points to another address.  "/>
							</outline>
						<outline text="Returns">
							<outline text="If the address is not a shortened url, it returns the address itself. If it is, it returns the address that it points to."/>
							</outline>
						<outline text="Notes">
							<outline text="9/17/2021 by DW -- it does not work in the case that the address is not a shortened url. Not sure why, no time to investigate at this time. "/>
							</outline>
						<outline text="Examples">
							<outline text="http.derefUrl (&quot;https://tinyurl.com/yvfkvaps&quot;)">
								<outline text="http://scripting.com/"/>
								</outline>
							<outline text="http.derefUrl (&quot;https://scripting.com/&quot;)">
								<outline text="http://scripting.com/"/>
								</outline>
							</outline>
						</outline>
					</outline>
				</outline>
			<outline text="package.json">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;belterCommandLine&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.4.0&quot;,"/>
					<outline text="&quot;main&quot;: &quot;cli.js&quot;,"/>
					<outline text="&quot;bin&quot;: {">
						<outline text="&quot;belt&quot;: &quot;cli.js&quot;"/>
						<outline text="},"/>
						</outline>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;daveutils&quot;: &quot;*&quot;,"/>
						<outline text="&quot;daves3&quot;: &quot;*&quot;,"/>
						<outline text="&quot;davefilesystem&quot;: &quot;*&quot;," created="Sun, 26 Mar 2023 15:45:35 GMT"/>
						<outline text="&quot;opml&quot;: &quot;*&quot;," created="Sun, 26 Mar 2023 15:45:35 GMT"/>
						<outline text="&quot;reallysimple&quot;: &quot;*&quot;," created="Sun, 26 Mar 2023 15:45:35 GMT"/>
						<outline text="&quot;aws-sdk&quot;: &quot;*&quot;," isComment="true"/>
						<outline text="&quot;child_process&quot;: &quot;*&quot;,"/>
						<outline text="&quot;require-from-string&quot;: &quot;*&quot;," created="Mon, 27 Mar 2023 15:15:54 GMT"/>
						<outline text="&quot;colors&quot;: &quot;*&quot;,"/>
						<outline text="&quot;acorn&quot;: &quot;*&quot;," created="Tue, 21 Mar 2023 16:14:27 GMT"/>
						<outline text="&quot;escodegen&quot;: &quot;*&quot;," created="Tue, 21 Mar 2023 16:14:27 GMT"/>
						<outline text="&quot;request&quot;: &quot;*&quot;"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="belter.js" created="Tue, 21 Mar 2023 15:36:09 GMT">
				<outline text="exports.runScriptText= runScriptText;"/>
				<outline text="exports.start = start;" created="Sun, 26 Mar 2023 16:21:24 GMT"/>
				<outline text="" created="Wed, 22 Mar 2023 16:50:35 GMT"/>
				<outline text="require (&quot;aws-sdk/lib/maintenance_mode_message&quot;).suppress = true;" isComment="true"/>
				<outline text="" isComment="true" created="Wed, 22 Mar 2023 18:50:38 GMT"/>
				<outline text="const aws = require (&quot;aws-sdk&quot;);" isComment="true"/>
				<outline text="" isComment="true" created="Tue, 21 Mar 2023 16:09:41 GMT"/>
				<outline text="const fs = require (&quot;fs&quot;);"/>
				<outline text="const utils = require (&quot;daveutils&quot;);"/>
				<outline text="const daves3 = require (&quot;daves3&quot;);"/>
				<outline text="const filesystem = require (&quot;davefilesystem&quot;);"/>
				<outline text="const opmlPackage = require (&quot;opml&quot;);" created="Sun, 26 Mar 2023 15:57:27 GMT"/>
				<outline text="const reallysimple = require (&quot;reallySimple&quot;);" created="Sun, 26 Mar 2023 15:57:27 GMT"/>
				<outline text="const requireFromString = require (&quot;require-from-string&quot;);"/>
				<outline text="const request = require (&quot;request&quot;);"/>
				<outline text="const escodegen = require (&quot;escodegen&quot;);" created="Tue, 21 Mar 2023 16:09:09 GMT"/>
				<outline text="const acorn = require (&quot;acorn&quot;);" created="Tue, 21 Mar 2023 16:09:09 GMT"/>
				<outline text="" created="Sun, 26 Mar 2023 16:21:43 GMT"/>
				<outline text="var config = {" created="Sun, 26 Mar 2023 16:21:43 GMT">
					<outline text="myDir: __dirname," created="Mon, 27 Mar 2023 14:25:58 GMT"/>
					<outline text="pluginsFolder: __dirname + &quot;/plugins/&quot;" created="Mon, 27 Mar 2023 14:59:07 GMT"/>
					<outline text="};" created="Sun, 26 Mar 2023 16:21:48 GMT"/>
					</outline>
				<outline text="var plugins = {" created="Mon, 27 Mar 2023 14:55:23 GMT">
					<outline text="};" created="Mon, 27 Mar 2023 14:55:28 GMT"/>
					</outline>
				<outline text="" created="Sun, 26 Mar 2023 16:25:46 GMT"/>
				<outline text="[[http://scripting.com/code/concord/concordscript/scripting.js]]" created="Tue, 21 Mar 2023 15:59:30 GMT"/>
				<outline text="" created="Wed, 22 Mar 2023 16:51:11 GMT"/>
				<outline text="function httpRequest (url, callback) {">
					<outline text="request (url, function (err, response, data) {">
						<outline text="if (err) {" created="Sun, 08 Aug 2021 15:33:13 GMT">
							<outline text="callback (err);" created="Sun, 08 Aug 2021 15:33:17 GMT"/>
							<outline text="}" created="Sun, 08 Aug 2021 15:33:20 GMT"/>
							</outline>
						<outline text="else {" created="Sun, 08 Aug 2021 15:33:21 GMT">
							<outline text="var code = response.statusCode;" created="Tue, 04 Jan 2022 22:39:15 GMT"/>
							<outline text="if ((code &lt; 200) || (code &gt; 299)) {" created="Sun, 08 Aug 2021 15:33:23 GMT">
								<outline text="const message = &quot;The request returned a status code of &quot; + response.statusCode + &quot;.&quot;;" created="Sun, 08 Aug 2021 15:34:06 GMT"/>
								<outline text="callback ({message});" created="Sun, 08 Aug 2021 15:34:43 GMT"/>
								<outline text="}" created="Sun, 08 Aug 2021 15:33:28 GMT"/>
								</outline>
							<outline text="else {" created="Sun, 08 Aug 2021 15:33:29 GMT">
								<outline text="callback (undefined, data) "/>
								<outline text="}" created="Sun, 08 Aug 2021 15:33:31 GMT"/>
								</outline>
							<outline text="}" created="Sun, 08 Aug 2021 15:33:33 GMT"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function fileLooper (folderpath, callback) {" created="Sun, 26 Mar 2023 15:44:21 GMT">
					<outline text="Changes" isComment="true" created="Sun, 26 Mar 2023 15:44:31 GMT">
						<outline text="3/26/23; 11:44:35 AM by DW" created="Sun, 26 Mar 2023 15:44:34 GMT">
							<outline text="Calls back for each file in the indicated folder at all levels." created="Sun, 26 Mar 2023 15:44:36 GMT"/>
							</outline>
						</outline>
					<outline text="filesystem.recursivelyVisitFiles (folderpath, callback);" created="Sun, 26 Mar 2023 15:46:24 GMT"/>
					<outline text="}" created="Sun, 26 Mar 2023 15:44:31 GMT"/>
					</outline>
				<outline text="" created="Wed, 22 Mar 2023 15:15:02 GMT"/>
				<outline text="const string = {" created="Wed, 22 Mar 2023 15:15:02 GMT">
					<outline text="getRandomSnarkySlogan: utils.getRandomSnarkySlogan," created="Wed, 22 Mar 2023 15:15:26 GMT"/>
					<outline text="endsWith: utils.endsWith," created="Sun, 26 Mar 2023 15:49:45 GMT"/>
					<outline text="delete: utils.stringDelete," created="Sun, 26 Mar 2023 15:49:45 GMT"/>
					<outline text="replaceAll: utils.replaceAll," created="Sun, 26 Mar 2023 15:49:45 GMT"/>
					<outline text="nthField: utils.stringNthField" created="Mon, 27 Mar 2023 15:13:43 GMT"/>
					<outline text="};" created="Wed, 22 Mar 2023 15:15:13 GMT"/>
					</outline>
				<outline text="const file = {" created="Wed, 22 Mar 2023 15:18:47 GMT">
					<outline text="readWholeFile: function (f) {" created="Wed, 22 Mar 2023 15:18:52 GMT">
						<outline text="return new Promise (function (resolve, reject) {">
							<outline text="fs.readFile (f, function (err, filetext) {" created="Wed, 22 Mar 2023 15:19:35 GMT">
								<outline text="if (err) {" created="Sat, 20 Feb 2021 17:20:29 GMT">
									<outline text="reject (err);" created="Sat, 20 Feb 2021 18:06:44 GMT"/>
									<outline text="}" created="Sat, 20 Feb 2021 17:20:36 GMT"/>
									</outline>
								<outline text="else {" created="Sat, 20 Feb 2021 17:20:36 GMT">
									<outline text="resolve (filetext.toString ()); "/>
									<outline text="}" created="Sat, 20 Feb 2021 17:20:38 GMT"/>
									</outline>
								<outline text="});" created="Wed, 22 Mar 2023 15:19:55 GMT"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}," created="Wed, 22 Mar 2023 15:19:09 GMT"/>
						</outline>
					<outline text="writeWholeFile: function (f, filetext) { ">
						<outline text="return new Promise (function (resolve, reject) {">
							<outline text="debugger;" isComment="true" created="Sun, 26 Mar 2023 17:47:53 GMT"/>
							<outline text="fs.writeFile (f, filetext, function (err, filetext) {" created="Wed, 22 Mar 2023 15:19:35 GMT">
								<outline text="if (err) {" created="Sat, 20 Feb 2021 17:20:29 GMT">
									<outline text="reject (err);" created="Sat, 20 Feb 2021 18:06:44 GMT"/>
									<outline text="}" created="Sat, 20 Feb 2021 17:20:36 GMT"/>
									</outline>
								<outline text="else {" created="Sat, 20 Feb 2021 17:20:36 GMT">
									<outline text="resolve (true); "/>
									<outline text="}" created="Sat, 20 Feb 2021 17:20:38 GMT"/>
									</outline>
								<outline text="});" created="Wed, 22 Mar 2023 15:19:55 GMT"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="},"/>
						</outline>
					<outline text="loop: function (folder, fileCallback) {" created="Sun, 26 Mar 2023 15:43:56 GMT">
						<outline text="return new Promise (function (resolve, reject) {">
							<outline text="debugger;" isComment="true" created="Sun, 26 Mar 2023 17:00:54 GMT"/>
							<outline text="filesystem.recursivelyVisitFiles (folder, fileCallback, function () {" created="Sun, 26 Mar 2023 15:46:24 GMT">
								<outline text="resolve (true); "/>
								<outline text="});" created="Sun, 26 Mar 2023 15:48:49 GMT"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}," created="Sun, 26 Mar 2023 15:44:10 GMT"/>
						</outline>
					<outline text="sureFilePath: function (f) {" created="Sun, 26 Mar 2023 17:18:58 GMT">
						<outline text="Changes" isComment="true" created="Sun, 26 Mar 2023 17:21:06 GMT">
							<outline text="3/26/23; 1:21:08 PM by DW" created="Sun, 26 Mar 2023 17:21:07 GMT">
								<outline text="Should be replaced with code that checks for errors! " created="Sun, 26 Mar 2023 17:21:08 GMT"/>
								</outline>
							</outline>
						<outline text="return new Promise (function (resolve, reject) {">
							<outline text="filesystem.sureFilePath (f, function () {" created="Sun, 26 Mar 2023 15:46:24 GMT">
								<outline text="resolve (true); "/>
								<outline text="});" created="Sun, 26 Mar 2023 15:48:49 GMT"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}" created="Sun, 26 Mar 2023 17:19:07 GMT"/>
						</outline>
					<outline text="}" created="Wed, 22 Mar 2023 15:19:12 GMT"/>
					</outline>
				<outline text="const opml = {" created="Sun, 26 Mar 2023 15:50:50 GMT">
					<outline text="parse: function (opmltext) { //9/13/21 by DW" created="Mon, 13 Sep 2021 21:23:41 GMT">
						<outline text="return new Promise (function (resolve, reject) {">
							<outline text="opmlPackage.parse (opmltext, function (err, theOutline) {" created="Wed, 22 Mar 2023 15:19:35 GMT">
								<outline text="if (err) {" created="Sat, 20 Feb 2021 17:20:29 GMT">
									<outline text="reject (err);" created="Sat, 20 Feb 2021 18:06:44 GMT"/>
									<outline text="}" created="Sat, 20 Feb 2021 17:20:36 GMT"/>
									</outline>
								<outline text="else {" created="Sat, 20 Feb 2021 17:20:36 GMT">
									<outline text="resolve (theOutline); "/>
									<outline text="}" created="Sat, 20 Feb 2021 17:20:38 GMT"/>
									</outline>
								<outline text="});" created="Wed, 22 Mar 2023 15:19:55 GMT"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}," created="Mon, 13 Sep 2021 21:23:50 GMT"/>
						</outline>
					<outline text="stringify: function (theOutline) { //9/13/21 by DW" created="Mon, 13 Sep 2021 21:23:41 GMT">
						<outline text="var opmltext = opmlPackage.stringify (theOutline);" created="Mon, 26 Jul 2021 15:18:12 GMT"/>
						<outline text="return (opmltext);" created="Mon, 13 Sep 2021 21:24:39 GMT"/>
						<outline text="}," created="Mon, 13 Sep 2021 21:23:50 GMT"/>
						</outline>
					<outline text="}" created="Sun, 26 Mar 2023 15:50:58 GMT"/>
					</outline>
				<outline text="const s3 = {" created="Wed, 22 Mar 2023 15:18:47 GMT">
					<outline text="newObject: function (path, data, type=&quot;text/plain&quot;, acl=&quot;public-read&quot;, metadata=undefined) {" created="Wed, 22 Mar 2023 15:18:52 GMT">
						<outline text="return new Promise (function (resolve, reject) {">
							<outline text="daves3.newObject (path, data, type, acl, function (err, data) {">
								<outline text="if (err) {" created="Sat, 20 Feb 2021 17:20:29 GMT">
									<outline text="reject (err);" created="Sat, 20 Feb 2021 18:06:44 GMT"/>
									<outline text="}" created="Sat, 20 Feb 2021 17:20:36 GMT"/>
									</outline>
								<outline text="else {" created="Sat, 20 Feb 2021 17:20:36 GMT">
									<outline text="resolve (true); "/>
									<outline text="}" created="Sat, 20 Feb 2021 17:20:38 GMT"/>
									</outline>
								<outline text="}, metadata);" created="Wed, 22 Mar 2023 16:01:48 GMT"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}," created="Wed, 22 Mar 2023 15:19:09 GMT"/>
						</outline>
					<outline text="getObject: function (path) {" created="Wed, 22 Mar 2023 15:18:52 GMT">
						<outline text="return new Promise (function (resolve, reject) {">
							<outline text="daves3.getObject (path, function (err, data) {">
								<outline text="if (err) {" created="Sat, 20 Feb 2021 17:20:29 GMT">
									<outline text="reject (err);" created="Sat, 20 Feb 2021 18:06:44 GMT"/>
									<outline text="}" created="Sat, 20 Feb 2021 17:20:36 GMT"/>
									</outline>
								<outline text="else {" created="Sat, 20 Feb 2021 17:20:36 GMT">
									<outline text="resolve (data.Body.toString ()); "/>
									<outline text="}" created="Sat, 20 Feb 2021 17:20:38 GMT"/>
									</outline>
								<outline text="});" created="Wed, 22 Mar 2023 16:01:48 GMT"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}," created="Wed, 22 Mar 2023 15:19:09 GMT"/>
						</outline>
					<outline text="getObjectMetadata: function (path) {" created="Wed, 22 Mar 2023 15:18:52 GMT">
						<outline text="return new Promise (function (resolve, reject) {">
							<outline text="daves3.getObjectMetadata (path, function (err, data) {">
								<outline text="if (err) {" created="Sat, 20 Feb 2021 17:20:29 GMT">
									<outline text="reject (err);" created="Sat, 20 Feb 2021 18:06:44 GMT"/>
									<outline text="}" created="Sat, 20 Feb 2021 17:20:36 GMT"/>
									</outline>
								<outline text="else {" created="Sat, 20 Feb 2021 17:20:36 GMT">
									<outline text="resolve (data); "/>
									<outline text="}" created="Sat, 20 Feb 2021 17:20:38 GMT"/>
									</outline>
								<outline text="}, true);" created="Wed, 22 Mar 2023 16:01:48 GMT"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}," created="Wed, 22 Mar 2023 15:19:09 GMT"/>
						</outline>
					<outline text="deleteObject: function (path) {" created="Wed, 22 Mar 2023 15:18:52 GMT">
						<outline text="return new Promise (function (resolve, reject) {">
							<outline text="daves3.deleteObject (path, function (err) {">
								<outline text="if (err) {" created="Sat, 20 Feb 2021 17:20:29 GMT">
									<outline text="reject (err);" created="Sat, 20 Feb 2021 18:06:44 GMT"/>
									<outline text="}" created="Sat, 20 Feb 2021 17:20:36 GMT"/>
									</outline>
								<outline text="else {" created="Sat, 20 Feb 2021 17:20:36 GMT">
									<outline text="resolve (true); "/>
									<outline text="}" created="Sat, 20 Feb 2021 17:20:38 GMT"/>
									</outline>
								<outline text="});" created="Wed, 22 Mar 2023 16:01:48 GMT"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}," created="Wed, 22 Mar 2023 15:19:09 GMT"/>
						</outline>
					<outline text="listObjects: function (path, callback) {" created="Wed, 22 Mar 2023 15:18:52 GMT">
						<outline text="return new Promise (function (resolve, reject) {">
							<outline text="var theList = new Array ();"/>
							<outline text="daves3.listObjects (path, function (item) {">
								<outline text="if (item.flLastObject !== undefined) {" created="Sat, 22 Mar 2014 16:41:13 GMT" pgfnum="39728">
									<outline text="resolve (theList);"/>
									<outline text="}" created="Sat, 22 Mar 2014 16:41:27 GMT" pgfnum="39731"/>
									</outline>
								<outline text="else {" created="Sat, 22 Mar 2014 16:41:28 GMT" pgfnum="39732">
									<outline text="theList.push (item.s3path);"/>
									<outline text="}" created="Sat, 22 Mar 2014 16:41:30 GMT" pgfnum="39733"/>
									</outline>
								<outline text="});" created="Wed, 22 Mar 2023 16:01:48 GMT"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}," created="Wed, 22 Mar 2023 15:19:09 GMT"/>
						</outline>
					<outline text="}" created="Wed, 22 Mar 2023 15:19:12 GMT"/>
					</outline>
				<outline text="const json = {" created="Wed, 22 Mar 2023 21:29:52 GMT">
					<outline text="stringify: function (obj) {" created="Wed, 22 Mar 2023 21:30:00 GMT">
						<outline text="return (utils.jsonStringify (obj));" created="Wed, 22 Mar 2023 21:30:15 GMT"/>
						<outline text="}" created="Wed, 22 Mar 2023 21:30:11 GMT"/>
						</outline>
					<outline text="}" created="Wed, 22 Mar 2023 21:29:56 GMT"/>
					</outline>
				<outline text="const http = {" created="Mon, 11 Jan 2021 21:29:43 GMT">
					<outline text="readUrl: function (url) {" created="Mon, 11 Jan 2021 21:29:44 GMT">
						<outline text="return new Promise (function (resolve, reject) {" created="Wed, 22 Mar 2023 22:17:15 GMT">
							<outline text="httpRequest (url, function (err, data) {" created="Thu, 17 Jun 2021 19:56:51 GMT">
								<outline text="if (err) {" created="Sun, 08 Aug 2021 15:12:18 GMT">
									<outline text="reject (err);" created="Sun, 08 Aug 2021 15:14:05 GMT"/>
									<outline text="}" created="Sun, 08 Aug 2021 15:14:10 GMT"/>
									</outline>
								<outline text="else {" created="Sun, 08 Aug 2021 15:12:29 GMT">
									<outline text="resolve (data.toString ()); "/>
									<outline text="}" created="Sun, 08 Aug 2021 15:12:31 GMT"/>
									</outline>
								<outline text="})" created="Thu, 17 Jun 2021 19:58:33 GMT"/>
								</outline>
							<outline text="});" created="Wed, 22 Mar 2023 22:17:15 GMT"/>
							</outline>
						<outline text="},"/>
						</outline>
					<outline text="derefUrl: function (url) { //9/17/21 by DW" isComment="true">
						<outline text="return new Promise (function (resolve, reject) {">
							<outline text="servercall (&quot;derefurl&quot;, {url}, true, function (err, data) {">
								<outline text="if (err) {" created="Sat, 20 Feb 2021 17:20:29 GMT">
									<outline text="reject (err);" created="Sat, 20 Feb 2021 18:06:44 GMT"/>
									<outline text="}" created="Sat, 20 Feb 2021 17:20:36 GMT"/>
									</outline>
								<outline text="else {" created="Sat, 20 Feb 2021 17:20:36 GMT">
									<outline text="resolve (data.longurl); "/>
									<outline text="}" created="Sat, 20 Feb 2021 17:20:38 GMT"/>
									</outline>
								<outline text="});" created="Sat, 20 Feb 2021 17:20:14 GMT"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="},"/>
						</outline>
					<outline text="client: function (options, flUseProxyServer=true) { //11/5/21 by DW" isComment="true" created="Mon, 11 Jan 2021 21:29:44 GMT">
						<outline text="Changes" isComment="true" created="Mon, 09 Aug 2021 20:27:31 GMT">
							<outline text="11/8/21; 9:30:48 AM by DW" created="Mon, 08 Nov 2021 14:30:47 GMT">
								<outline text="We provide a user-agent header, which can be overridden." created="Mon, 08 Nov 2021 14:30:48 GMT"/>
								</outline>
							<outline text="11/7/21; 10:04:26 AM by DW" created="Sun, 07 Nov 2021 15:04:25 GMT">
								<outline text="Implement headers. If the caller provides headers, we add them to the headers in the request, we don't overwrite the whole collection of headers. That way if later we want to initialize the headers with something that identifies the request as coming from Drummer, we can just add it to the default request struct. " created="Sun, 07 Nov 2021 15:04:26 GMT"/>
								</outline>
							<outline text="11/5/21; 11:43:37 AM by DW" created="Mon, 09 Aug 2021 20:27:36 GMT">
								<outline text="A work in progress. The goal is to eventually have all the features of HTTP available to scripts running in Drummer. " created="Fri, 05 Nov 2021 15:43:45 GMT"/>
								<outline text="The names of values in the options struct come from the defiinitions for the jQuery call." created="Thu, 04 Nov 2021 18:35:38 GMT">
									<outline text="https://www.w3schools.com/jquery/ajax_ajax.asp" created="Thu, 04 Nov 2021 18:36:03 GMT"/>
									</outline>
								</outline>
							<outline text="8/2/21; 2:19:56 PM by DW" created="Mon, 02 Aug 2021 18:19:55 GMT">
								<outline text="If filedata is not a PlainObject or a string, convert it to a string." created="Mon, 02 Aug 2021 18:19:58 GMT"/>
								</outline>
							</outline>
						<outline text="var request = { //defaults" created="Thu, 04 Nov 2021 18:26:27 GMT">
							<outline text="type: &quot;GET&quot;," created="Thu, 04 Nov 2021 18:21:52 GMT"/>
							<outline text="url: undefined, //defaults to the current page" created="Thu, 04 Nov 2021 18:36:51 GMT"/>
							<outline text="data: undefined," created="Thu, 04 Nov 2021 18:27:23 GMT"/>
							<outline text="params: undefined," created="Thu, 04 Nov 2021 18:22:23 GMT"/>
							<outline text="headers: {">
								<outline text="&quot;User-Agent&quot;: drummer.productname () + &quot; v&quot; + drummer.version ()"/>
								<outline text="}"/>
								</outline>
							<outline text="}" created="Thu, 04 Nov 2021 18:26:40 GMT"/>
							</outline>
						<outline text="if (options.headers !== undefined) { //11/7/21 by DW" created="Sun, 07 Nov 2021 15:02:49 GMT">
							<outline text="for (var x in options.headers) {" created="Thu, 04 Nov 2021 18:26:27 GMT">
								<outline text="request.headers [x] = options.headers [x];" created="Thu, 04 Nov 2021 18:27:45 GMT"/>
								<outline text="}" created="Thu, 04 Nov 2021 18:27:57 GMT"/>
								</outline>
							<outline text="}" created="Sun, 07 Nov 2021 15:03:01 GMT"/>
							</outline>
						<outline text="for (var x in options) {" created="Thu, 04 Nov 2021 18:26:27 GMT">
							<outline text="if (x != &quot;headers&quot;) {" created="Sun, 07 Nov 2021 15:04:04 GMT">
								<outline text="request [x] = options [x];" created="Thu, 04 Nov 2021 18:27:45 GMT"/>
								<outline text="}" created="Sun, 07 Nov 2021 15:04:11 GMT"/>
								</outline>
							<outline text="}" created="Thu, 04 Nov 2021 18:27:57 GMT"/>
							</outline>
						<outline text="if (request.data !== undefined) {" created="Thu, 04 Nov 2021 18:26:27 GMT">
							<outline text="if (!$.isPlainObject (request.data) &amp;&amp; (typeof (request.data) != &quot;string&quot;)) { //8/2/21 by DW" created="Mon, 02 Aug 2021 18:36:54 GMT">
								<outline text="request.data = request.data.toString ();" created="Mon, 02 Aug 2021 18:38:49 GMT"/>
								<outline text="}" created="Mon, 02 Aug 2021 18:38:43 GMT"/>
								</outline>
							<outline text="}" created="Thu, 04 Nov 2021 18:28:51 GMT"/>
							</outline>
						<outline text="if (request.params !== undefined) {" created="Thu, 04 Nov 2021 18:31:21 GMT">
							<outline text="request.url += &quot;?&quot; + drummerBuildParamList (request.params);" created="Wed, 03 Nov 2021 15:06:40 GMT"/>
							<outline text="}" created="Thu, 04 Nov 2021 18:31:33 GMT"/>
							</outline>
						<outline text="if (flUseProxyServer) {" created="Fri, 05 Nov 2021 15:24:35 GMT">
							<outline text="return new Promise (function (resolve, reject) {">
								<outline text="var proxyRequest = {" created="Fri, 05 Nov 2021 15:25:29 GMT">
									<outline text="method: request.type," created="Thu, 31 Jul 2014 16:39:06 GMT" pgfnum="43067"/>
									<outline text="url: request.url," created="Thu, 31 Jul 2014 16:39:22 GMT" pgfnum="43070"/>
									<outline text="body: request.data," created="Fri, 05 Nov 2021 15:40:30 GMT"/>
									<outline text="headers: request.headers" created="Sun, 07 Nov 2021 15:38:15 GMT"/>
									<outline text="};" created="Fri, 05 Nov 2021 15:25:41 GMT"/>
									</outline>
								<outline text="var jsontext = jsonStringify (proxyRequest);" created="Fri, 05 Nov 2021 16:02:26 GMT"/>
								<outline text="servercall (&quot;httprequest&quot;, {request: jsontext}, true, function (err, data) {">
									<outline text="if (err) {" created="Sat, 20 Feb 2021 17:20:29 GMT">
										<outline text="reject (err);" created="Sat, 20 Feb 2021 18:06:44 GMT"/>
										<outline text="}" created="Sat, 20 Feb 2021 17:20:36 GMT"/>
										</outline>
									<outline text="else {" created="Sat, 20 Feb 2021 17:20:36 GMT">
										<outline text="resolve (data); "/>
										<outline text="}" created="Sat, 20 Feb 2021 17:20:38 GMT"/>
										</outline>
									<outline text="});" created="Sat, 20 Feb 2021 17:20:14 GMT"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}" created="Fri, 05 Nov 2021 15:24:51 GMT"/>
							</outline>
						<outline text="else {" created="Mon, 09 Aug 2021 20:29:06 GMT">
							<outline text="return new Promise (function (resolve, reject) {">
								<outline text="$.ajax (request)">
									<outline text=".success (function (data, status) { ">
										<outline text="resolve (data); "/>
										<outline text="}) "/>
										</outline>
									<outline text=".error (function (status) { ">
										<outline text="var err = JSON.parse (status.responseText);" created="Thu, 04 Nov 2021 19:00:53 GMT"/>
										<outline text="reject (err);" created="Thu, 04 Nov 2021 18:55:19 GMT"/>
										<outline text="});"/>
										</outline>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}" created="Mon, 09 Aug 2021 20:29:08 GMT"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="" created="Mon, 27 Mar 2023 14:24:29 GMT"/>
				<outline text="function readConfig (f, config, callback) {" created="Mon, 08 Mar 2021 15:19:44 GMT">
					<outline text="fs.readFile (f, function (err, jsontext) {" created="Mon, 08 Mar 2021 15:19:57 GMT">
						<outline text="if (!err) {" created="Mon, 08 Mar 2021 15:20:27 GMT">
							<outline text="try {" created="Mon, 08 Mar 2021 15:20:49 GMT">
								<outline text="var jstruct = JSON.parse (jsontext);" created="Mon, 08 Mar 2021 15:21:07 GMT"/>
								<outline text="for (var x in jstruct) {" created="Mon, 08 Mar 2021 15:21:14 GMT">
									<outline text="config [x] = jstruct [x];" created="Mon, 08 Mar 2021 15:21:20 GMT"/>
									<outline text="}" created="Mon, 08 Mar 2021 15:21:25 GMT"/>
									</outline>
								<outline text="}" created="Mon, 08 Mar 2021 15:20:58 GMT"/>
								</outline>
							<outline text="catch (err) {" created="Mon, 08 Mar 2021 15:20:59 GMT">
								<outline text="console.log (&quot;Error reading &quot; + f);" isComment="true" created="Mon, 08 Mar 2021 15:20:35 GMT"/>
								<outline text="}" created="Mon, 08 Mar 2021 15:21:03 GMT"/>
								</outline>
							<outline text="}" created="Mon, 08 Mar 2021 15:20:30 GMT"/>
							</outline>
						<outline text="callback ();" created="Mon, 08 Mar 2021 15:22:15 GMT"/>
						<outline text="});" created="Mon, 08 Mar 2021 15:20:25 GMT"/>
						</outline>
					<outline text="}" created="Mon, 08 Mar 2021 15:19:56 GMT"/>
					</outline>
				<outline text="" created="Mon, 27 Mar 2023 14:55:54 GMT"/>
				<outline text="function loadPlugins (callback) {" created="Mon, 27 Mar 2023 14:55:54 GMT">
					<outline text="const folder = config.pluginsFolder;" created="Mon, 27 Mar 2023 14:58:59 GMT"/>
					<outline text="function loadPlugin (fname) {" created="Mon, 27 Mar 2023 15:01:13 GMT">
						<outline text="if (string.endsWith (fname, &quot;.js&quot;)) {" created="Mon, 27 Mar 2023 15:11:29 GMT">
							<outline text="const f = folder + fname;" created="Mon, 27 Mar 2023 15:39:42 GMT"/>
							<outline text="console.log (&quot;loadPlugin: &quot; + f);" created="Mon, 27 Mar 2023 15:01:18 GMT"/>
							<outline text="const name = string.nthField (fname, &quot;.&quot;, 1);" created="Mon, 27 Mar 2023 15:12:43 GMT"/>
							<outline text="fs.readFile (f, function (err, filetext) {" created="Mon, 27 Mar 2023 15:16:12 GMT">
								<outline text="if (err) {" created="Mon, 27 Mar 2023 15:16:27 GMT">
									<outline text="console.log (&quot;loadPlugin: err.message == &quot; + err.message);" created="Mon, 27 Mar 2023 15:01:18 GMT"/>
									<outline text="}" created="Mon, 27 Mar 2023 15:16:29 GMT"/>
									</outline>
								<outline text="else {" created="Mon, 27 Mar 2023 15:16:30 GMT">
									<outline text="plugins [name] = requireFromString (filetext.toString ());" created="Mon, 27 Mar 2023 15:12:43 GMT"/>
									<outline text="}" created="Mon, 27 Mar 2023 15:16:32 GMT"/>
									</outline>
								<outline text="});" created="Mon, 27 Mar 2023 15:16:22 GMT"/>
								</outline>
							<outline text="}" created="Mon, 27 Mar 2023 15:11:45 GMT"/>
							</outline>
						<outline text="}" created="Mon, 27 Mar 2023 15:01:17 GMT"/>
						</outline>
					<outline text="filesystem.sureFilePath (folder + &quot;x&quot;, function () {">
						<outline text="fs.readdir (folder, function (err, theListOfFiles) {">
							<outline text="if (err) {">
								<outline text="callback (err); " created="Mon, 27 Mar 2023 15:01:59 GMT"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="debugger;" created="Mon, 27 Mar 2023 15:46:12 GMT"/>
								<outline text="theListOfFiles.forEach (function (fname) {">
									<outline text="loadPlugin (fname);"/>
									<outline text="});"/>
									</outline>
								<outline text="callback (undefined);" created="Mon, 27 Mar 2023 15:02:56 GMT"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}" created="Mon, 27 Mar 2023 14:56:01 GMT"/>
					</outline>
				<outline text="" created="Mon, 27 Mar 2023 14:55:55 GMT"/>
				<outline text="function start (callback) {" created="Sun, 26 Mar 2023 16:25:46 GMT">
					<outline text="readConfig (config.myDir + &quot;/config.json&quot;, config, function () {" created="Sun, 26 Mar 2023 16:26:26 GMT">
						<outline text="loadPlugins (function (err) {" created="Mon, 27 Mar 2023 14:55:38 GMT">
							<outline text="if (err) {" created="Mon, 27 Mar 2023 15:02:08 GMT">
								<outline text="console.log (&quot;belter.start: err.message == &quot; + err.message);"/>
								<outline text="}" created="Mon, 27 Mar 2023 15:02:10 GMT"/>
								</outline>
							<outline text="callback ();" created="Sun, 26 Mar 2023 16:26:59 GMT"/>
							<outline text="});" created="Mon, 27 Mar 2023 14:55:46 GMT"/>
							</outline>
						<outline text="});" created="Sun, 26 Mar 2023 16:26:49 GMT"/>
						</outline>
					<outline text="}" created="Sun, 26 Mar 2023 16:26:15 GMT"/>
					</outline>
				</outline>
			<outline text="cli.js">
				<outline text="#!/usr/bin/env node"/>
				<outline text=""/>
				<outline text="const myVersion = &quot;0.4.0&quot;, myProductName = &quot;belterCommandLine&quot;, shortProductName = &quot;belt&quot;; " created="Mon, 03 Feb 2014 03:21:03 GMT" pgfnum="36831"/>
				<outline text=""/>
				<outline text="Changes" isComment="true">
					<outline text="2/4/21; 11:28:37 AM by DW">
						<outline text="Look for config.json in the directory we were launched from not the cwd. "/>
						</outline>
					</outline>
				<outline text=""/>
				<outline text="const fs = require (&quot;fs&quot;); "/>
				<outline text="const utils = require (&quot;daveutils&quot;);"/>
				<outline text="const request = require (&quot;request&quot;);"/>
				<outline text="const childProcess = require (&quot;child_process&quot;);"/>
				<outline text="const colors = require (&quot;colors&quot;);"/>
				<outline text="const belter = require (&quot;./belter.js&quot;); " created="Tue, 21 Mar 2023 15:35:50 GMT"/>
				<outline text=""/>
				<outline text="function pad (val, withchar, ctplaces, flleftalign) {">
					<outline text="var s = (val === undefined) ? &quot;&quot; : val.toString ();" created="Thu, 06 Jun 2013 19:04:50 GMT" pgfnum="25301"/>
					<outline text="var s = val.toString ();" isComment="true" created="Thu, 06 Jun 2013 19:04:50 GMT" pgfnum="25301"/>
					<outline text="while (s.length &lt; ctplaces) {" created="Thu, 06 Jun 2013 19:04:23 GMT" pgfnum="25299">
						<outline text="if (flleftalign) {">
							<outline text="s = s + withchar;" created="Thu, 06 Jun 2013 19:05:07 GMT" pgfnum="25302"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="s = withchar + s;" created="Thu, 06 Jun 2013 19:05:07 GMT" pgfnum="25302"/>
							<outline text="}"/>
							</outline>
						<outline text="}" created="Thu, 06 Jun 2013 19:04:43 GMT" pgfnum="25300"/>
						</outline>
					<outline text="return (s);" created="Thu, 06 Jun 2013 19:12:58 GMT" pgfnum="25311"/>
					<outline text="}"/>
					</outline>
				<outline text="function readJsonFile (path, callback) {">
					<outline text="utils.sureFilePath (path, function () {">
						<outline text="fs.readFile (path, function (err, data) {">
							<outline text="var theObject = undefined;"/>
							<outline text="if (err) {">
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="try {">
									<outline text="theObject = JSON.parse (data);"/>
									<outline text="}"/>
									</outline>
								<outline text="catch (err) {">
									<outline text="console.log (&quot;readJsonFile: err.message == &quot; + err.message);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="callback (theObject);"/>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function doCommand (theCommand, callback) {" isComment="true">
					<outline text="var url = &quot;http://&quot; + config.domain + &quot;:&quot; + config.port + &quot;/&quot; + theCommand;"/>
					<outline text="console.log (&quot;doCommand: url == &quot; + url);" isComment="true"/>
					<outline text="request (url, function (err, response, data) { ">
						<outline text="if (err) {">
							<outline text="callback (err);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="if (response.statusCode != 200) {">
								<outline text="callback ({message: &quot;Error: &quot; + data.toString ()});"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="callback (undefined, data.toString ());"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function getProcessList (callback) {" isComment="true">
					<outline text="doCommand (&quot;list&quot;, function (err, val) {">
						<outline text="if (err) {">
							<outline text="callback (err);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="try {">
								<outline text="console.log (&quot;getProcessList: val == &quot; + val);" isComment="true"/>
								<outline text="var jstruct = JSON.parse (val);"/>
								<outline text="callback (undefined, jstruct);"/>
								<outline text="}"/>
								</outline>
							<outline text="catch (err) {">
								<outline text="callback (err);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function rescanCommand (callback) {" isComment="true">
					<outline text="doCommand (&quot;rescan&quot;, function (err, val) {">
						<outline text="if (err) {">
							<outline text="callback (err);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="try {">
								<outline text="console.log (&quot;rescanCommand: val == &quot; + val);" isComment="true"/>
								<outline text="var jstruct = JSON.parse (val);"/>
								<outline text="callback (undefined, jstruct);"/>
								<outline text="}"/>
								</outline>
							<outline text="catch (err) {">
								<outline text="callback (err);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function getProcessInfo (ixProcess, callback) {" isComment="true">
					<outline text="ixProcess = Number (ixProcess);"/>
					<outline text="getProcessList (function (err, theList) {">
						<outline text="if (err) {">
							<outline text="callback (err);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="if (ixProcess &lt; theList.length) {">
								<outline text="callback (undefined, theList [ixProcess]);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="var s = (theList.length == 1) ? &quot;there is only &quot; + theList.length + &quot; process&quot; : &quot;there are only &quot; + theList.length + &quot; processes&quot;"/>
								<outline text="callback ({message: &quot;Can't find process #&quot; + ixProcess + &quot; because &quot; + s + &quot; in the list.&quot;});"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function applyToProcessCommand (ixProcess, theCommand, callback) {" isComment="true">
					<outline text="getProcessInfo (ixProcess, function (err, theProcess) {">
						<outline text="if (err) {">
							<outline text="callback (err);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="if ((!theProcess.running) &amp;&amp; (theCommand == &quot;stop&quot;)) {">
								<outline text="if (callback !== undefined) {">
									<outline text="callback ({message: &quot;Can't stop the process because it isn't running.&quot;});"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="doCommand (theCommand + &quot;?file=&quot; + theProcess.file, callback);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="getProcessList (function (err, theList) {" isComment="true">
						<outline text="if (err) {">
							<outline text="callback (err);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="var ixProcessToStop = Number (ixProcess);"/>
							<outline text="if (ixProcessToStop &lt; theList.length) {">
								<outline text="var theProcess = theList [ixProcessToStop];"/>
								<outline text="if (!theProcess.running) {">
									<outline text="if (callback !== undefined) {">
										<outline text="callback ({message: &quot;Can't stop the process because it isn't running.&quot;});"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="doCommand (theCommand + &quot;?file=&quot; + theProcess.file, callback);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="callback ({message: &quot;There aren't enough processes.&quot;});"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="doCommand (&quot;list&quot;, function (err, val) {" isComment="true">
						<outline text="if (err) {">
							<outline text="console.log (err.message);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="var jstruct = JSON.parse (val);"/>
							<outline text="var ixProcessToStop = Number (ixProcess);"/>
							<outline text="if (ixProcessToStop &lt; jstruct.length) {">
								<outline text="var theProcess = jstruct [ixProcessToStop];"/>
								<outline text="doCommand (theCommand + &quot;?file=&quot; + theProcess.file, function (err, val) {">
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="console.log (&quot;There aren't that many processes.&quot;);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function stopCommand (ixProcess, callback) {" isComment="true">
					<outline text="applyToProcessCommand (ixProcess, &quot;stop&quot;, function (err, msg) {">
						<outline text="if (err) {">
							<outline text="console.log (&quot;\n&quot; + err.message + &quot;\n&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="console.log (&quot;\n&quot; + msg + &quot;\n&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function restartCommand (ixProcess, callback) {" isComment="true">
					<outline text="console.log (&quot;restartCommand&quot;);"/>
					<outline text="applyToProcessCommand (ixProcess, &quot;restart&quot;, function (err, msg) {">
						<outline text="if (err) {">
							<outline text="console.log (&quot;\n&quot; + err.message + &quot;\n&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="console.log (&quot;\n&quot; + msg + &quot;\n&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function logCommand (ixProcess) { //start scrolling the log for the indicated process" isComment="true">
					<outline text="getProcessInfo (ixProcess, function (err, theProcess) {">
						<outline text="if (err) {">
							<outline text="console.log (err);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="var theProcess = childProcess.spawn (&quot;tail&quot;, [&quot;-f&quot;, theProcess.logfile]);"/>
							<outline text="theProcess.stdout.on (&quot;data&quot;, function (linetext) {">
								<outline text="linetext = linetext.toString ();"/>
								<outline text="console.log (utils.trimWhitespace (linetext));"/>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="getProcessList (function (err, theList) {" isComment="true">
						<outline text="if (err) {">
							<outline text="console.log (err.message);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="var ixProcessToWatch = Number (ixProcess);"/>
							<outline text="if (ixProcessToWatch &lt; theList.length) {">
								<outline text="var theProcess = theList [ixProcessToWatch];"/>
								<outline text="var bashCommand = &quot;tail -f &quot; + theProcess.logfile;"/>
								<outline text="console.log (bashCommand);"/>
								<outline text="childProcess.exec (bashCommand);"/>
								<outline text=""/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="console.log (&quot;There aren't enough processes.&quot;);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function listCommand () {" isComment="true">
					<outline text="Changes" isComment="true">
						<outline text="6/16/20; 12:19:01 PM by DW">
							<outline text="What a mess. utils.getFacebookTimeString doesn't work on servers because strftime is not implemented. It can be and should, but it has to be done carefully. "/>
							</outline>
						<outline text="6/16/20; 11:03:07 AM by DW">
							<outline text="Add one to &quot;restarts&quot; because the column title says &quot;starts.&quot;"/>
							</outline>
						<outline text="6/13/20; 10:53:40 AM by DW">
							<outline text="If no domain is specified, list it, with the domain blank."/>
							</outline>
						</outline>
					<outline text=""/>
					<outline text="//debugging -- 6/16/20 by DW" isComment="true">
						<outline text="var when = new Date (1592231497600); "/>
						<outline text="var timezone =  - (new Date ().getTimezoneOffset () / 60);"/>
						<outline text="console.log (&quot;timezone == &quot; + timezone);"/>
						<outline text="formatDate (when, &quot;%l:%M %p&quot;, -2);"/>
						</outline>
					<outline text=""/>
					<outline text="getProcessList (function (err, theList) {">
						<outline text="if (err) {">
							<outline text="console.log (&quot;\n&quot; + err.message + &quot;\n&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="function line (ix, domain, port, fname, logfile, restarts, runningtime, ctHits, whenLastHit, fltitleline) {">
								<outline text="const maxlengthdomain = 30;"/>
								<outline text="const maxlengthfname = 15;"/>
								<outline text="const maxlengthlogfile = 30;"/>
								<outline text="const maxlengthport = 5;"/>
								<outline text="const maxlengthrestarts = 6;"/>
								<outline text="const maxlengthcthits = 6;"/>
								<outline text="var s = &quot;&quot;;"/>
								<outline text="function pushval (val) {">
									<outline text="if (fltitleline) {">
										<outline text="val = val.blue.bold;"/>
										<outline text="}"/>
										</outline>
									<outline text="s += val + &quot; \t&quot;;"/>
									<outline text="}"/>
									</outline>
								<outline text=""/>
								<outline text="if (ix === undefined) {">
									<outline text="s += utils.filledString (&quot; &quot;, 7);"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="s += pad (&quot;[&quot; + ix + &quot;]&quot;, &quot; &quot; , 5) + &quot;: &quot;;"/>
									<outline text="}"/>
									</outline>
								<outline text=""/>
								<outline text="pushval (pad (domain, &quot; &quot;, maxlengthdomain, true));"/>
								<outline text="pushval (pad (port, &quot; &quot;, maxlengthport, true));"/>
								<outline text="pushval (pad (fname, &quot; &quot;, maxlengthfname, true));"/>
								<outline text="pushval (pad (logfile, &quot; &quot;, maxlengthlogfile, true));"/>
								<outline text="pushval (pad (ctHits, &quot; &quot;, maxlengthcthits, true));"/>
								<outline text="pushval (pad (restarts, &quot; &quot;, maxlengthrestarts, true));"/>
								<outline text="pushval (runningtime);"/>
								<outline text="console.log (s);"/>
								<outline text="}"/>
								</outline>
							<outline text="console.log (utils.jsonStringify (theList));" isComment="true"/>
							<outline text="console.log (&quot;\n&quot;);" isComment="true"/>
							<outline text="line (undefined, &quot;domain&quot;, &quot;port&quot;, &quot;fname&quot;, &quot;logfile&quot;, &quot;starts&quot;, &quot;last-start&quot;, &quot;hits&quot;, &quot;when&quot;, true);"/>
							<outline text="theList.forEach (function (item, ix) {">
								<outline text="console.log (utils.jsonStringify (item));" isComment="true"/>
								<outline text="var domain = (item.domain === undefined) ? &quot;&quot; : item.domain;"/>
								<outline text="var runningtime = item.running ? runningTime (item.ctime): &quot;STOPPED&quot;;" isComment="true"/>
								<outline text="var runningtime = item.running ? utils.howLongSinceStartAsString (new Date (item.ctime), false) : &quot;STOPPED&quot;;" isComment="true"/>
								<outline text="var runningtime = item.running ? utils.getFacebookTimeString (item.ctime, false) : &quot;STOPPED&quot;;"/>
								<outline text=""/>
								<outline text="console.log (runningtime);" isComment="true"/>
								<outline text="line (ix, domain, item.port, fileFromPath (item.file), item.logfile, item.restarts + 1, runningtime, item.ctHits, item.whenLastHit, false);"/>
								<outline text="});"/>
								</outline>
							<outline text="console.log (&quot;\n&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function helpCommand () {">
					<outline text="const maxcommandlength = 30;"/>
					<outline text="function onecommand (theCommand, theMeaning) {">
						<outline text="theCommand = pad (theCommand, &quot; &quot;, maxcommandlength, true);"/>
						<outline text="console.log (theCommand + theMeaning);"/>
						<outline text="}"/>
						</outline>
					<outline text="console.log (&quot;\nList of commands supported by &quot; + myProductName + &quot; v&quot; + myVersion + &quot;.\n&quot;);"/>
					<outline text="console.log ((pad (&quot;Command&quot;, &quot; &quot;, maxcommandlength, true) + &quot;Meaning&quot;).blue.bold);"/>
					<outline text="onecommand (&quot;list&quot;, &quot;list all the apps running in pagePark.&quot;);"/>
					<outline text="onecommand (&quot;rescan&quot;, &quot;search the domains folder for apps that aren't yet running and try to launch them.&quot;);"/>
					<outline text="onecommand (&quot;stop appnum&quot;, &quot;stops the app indicated by appnum.&quot;);"/>
					<outline text="onecommand (&quot;restart appnum&quot;, &quot;restarts the app indicated by appnum.&quot;);"/>
					<outline text="onecommand (&quot;log appnum&quot;, &quot;scrolls the log for the app indicated by appnum.&quot;);"/>
					<outline text="onecommand (&quot;now&quot;, &quot;the current time on the server&quot;);"/>
					<outline text="onecommand (&quot;help&quot;, &quot;show a list of commands that &quot; + shortProductName + &quot; supports.&quot;);"/>
					<outline text="console.log (&quot;\n&quot;);"/>
					<outline text="}"/>
					</outline>
				<outline text="function fileFromPath (f) {" isComment="true">
					<outline text="return (utils.stringLastField (f, &quot;/&quot;));"/>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text="function startup () {">
					<outline text="belter.start (function () {" created="Sun, 26 Mar 2023 16:24:10 GMT">
						<outline text="if (process.argv.length &lt;= 2) {">
							<outline text="helpCommand (); //belt with no params is the help command"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="let beltfile = process.argv [2];" created="Tue, 21 Mar 2023 14:57:59 GMT"/>
							<outline text="fs.readFile (beltfile, function (err, filetext) {" created="Tue, 21 Mar 2023 14:57:48 GMT">
								<outline text="if (err) {" created="Tue, 21 Mar 2023 14:58:53 GMT">
									<outline text="console.log (err.message);" created="Tue, 21 Mar 2023 14:58:57 GMT"/>
									<outline text="}" created="Tue, 21 Mar 2023 14:59:03 GMT"/>
									</outline>
								<outline text="else {" created="Tue, 21 Mar 2023 14:59:04 GMT">
									<outline text="console.log (&quot;&quot;);" created="Wed, 22 Mar 2023 15:36:12 GMT"/>
									<outline text="belter.runScriptText (filetext.toString (), function (err, data) {" created="Tue, 21 Mar 2023 16:19:39 GMT">
										<outline text="if (err) {" created="Tue, 21 Mar 2023 16:20:14 GMT">
											<outline text="console.log (err.message + &quot;\n&quot;);" created="Tue, 21 Mar 2023 16:20:37 GMT"/>
											<outline text="}" created="Tue, 21 Mar 2023 16:20:42 GMT"/>
											</outline>
										<outline text="});" created="Tue, 21 Mar 2023 16:20:04 GMT"/>
										</outline>
									<outline text="}" created="Tue, 21 Mar 2023 14:59:06 GMT"/>
									</outline>
								<outline text="});" created="Tue, 21 Mar 2023 14:58:52 GMT"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});" created="Sun, 26 Mar 2023 16:27:45 GMT"/>
						</outline>
					<outline text="var myDir = __dirname;" isComment="true"/>
					<outline text="readJsonFile (myDir + &quot;/config.json&quot;, function (theData) {" isComment="true">
						<outline text="belter.config = new Object ();" created="Sun, 26 Mar 2023 16:23:19 GMT"/>
						<outline text="if (theData !== undefined) {">
							<outline text="for (var x in theData) {">
								<outline text="belter.config [x] = theData [x];"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="config.myDir = myDir; //2/4/21 by DW" isComment="true"/>
						<outline text="console.log (&quot;\n&quot; + myProductName + &quot; v&quot; + myVersion + &quot;, config == &quot; + utils.jsonStringify (config));" isComment="true"/>
						<outline text="var fldone = false;"/>
						<outline text="if (process.argv.length &lt;= 2) {">
							<outline text="helpCommand (); //belt with no params is the help command"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="let beltfile = process.argv [2];" created="Tue, 21 Mar 2023 14:57:59 GMT"/>
							<outline text="fs.readFile (beltfile, function (err, filetext) {" created="Tue, 21 Mar 2023 14:57:48 GMT">
								<outline text="if (err) {" created="Tue, 21 Mar 2023 14:58:53 GMT">
									<outline text="console.log (err.message);" created="Tue, 21 Mar 2023 14:58:57 GMT"/>
									<outline text="}" created="Tue, 21 Mar 2023 14:59:03 GMT"/>
									</outline>
								<outline text="else {" created="Tue, 21 Mar 2023 14:59:04 GMT">
									<outline text="console.log (&quot;&quot;);" created="Wed, 22 Mar 2023 15:36:12 GMT"/>
									<outline text="belter.runScriptText (filetext.toString (), function (err, data) {" created="Tue, 21 Mar 2023 16:19:39 GMT">
										<outline text="if (err) {" created="Tue, 21 Mar 2023 16:20:14 GMT">
											<outline text="console.log (err.message + &quot;\n&quot;);" created="Tue, 21 Mar 2023 16:20:37 GMT"/>
											<outline text="}" created="Tue, 21 Mar 2023 16:20:42 GMT"/>
											</outline>
										<outline text="});" created="Tue, 21 Mar 2023 16:20:04 GMT"/>
										</outline>
									<outline text="}" created="Tue, 21 Mar 2023 14:59:06 GMT"/>
									</outline>
								<outline text="});" created="Tue, 21 Mar 2023 14:58:52 GMT"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="startup ();"/>
				</outline>
			<outline text="config.json">
				<outline text="{">
					<outline text="&quot;user&quot;: {" created="Sun, 26 Mar 2023 15:41:49 GMT">
						<outline text="&quot;prefs&quot;: {" created="Sun, 26 Mar 2023 15:34:01 GMT">
							<outline text="&quot;githubfolder&quot;: &quot;/Users/davewiner/GitHub/&quot;," created="Sun, 26 Mar 2023 15:34:04 GMT"/>
							<outline text="&quot;homefolder&quot;: &quot;/Users/davewiner/&quot;" created="Sun, 26 Mar 2023 15:34:11 GMT"/>
							<outline text="}" created="Sun, 26 Mar 2023 15:41:52 GMT"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="readme.md">
				<outline text="# Belter command line tool">
					<outline text="Run JavaScript code from the command line, no callback hell, just straightline code. " created="Mon, 27 Mar 2023 14:21:07 GMT"/>
					</outline>
				<outline text="### How to install the command line tool">
					<outline text="1. cd into the cli directory"/>
					<outline text="2. chmod u+x cli.js" created="Wed, 23 Feb 2022 15:19:43 GMT"/>
					<outline text="3. npm install -g"/>
					<outline text="From there you can type &lt;i&gt;belt&lt;/i&gt; at the command line to do stuff with this tool"/>
					</outline>
				<outline text="### Philosophy" created="Mon, 27 Mar 2023 14:20:44 GMT">
					<outline text="Super simple, easy to hack." created="Mon, 27 Mar 2023 14:20:50 GMT"/>
					</outline>
				<outline text="### Built-in verb set" created="Mon, 27 Mar 2023 14:21:35 GMT">
					<outline text="Lots of functionality built-in, ready to call." created="Mon, 27 Mar 2023 14:21:46 GMT"/>
					<outline text="List the different classes with pointers to the verb docs." created="Mon, 27 Mar 2023 14:21:56 GMT"/>
					</outline>
				<outline text="### Add your own verbs" created="Mon, 27 Mar 2023 14:22:14 GMT">
					<outline text="Extensible through standard Node.js modules. " created="Mon, 27 Mar 2023 14:22:26 GMT"/>
					</outline>
				</outline>
			<outline text="" created="Sun, 26 Mar 2023 15:34:42 GMT"/>
			<outline text="examples/buildblogtext.belt" created="Sun, 26 Mar 2023 15:34:43 GMT">
				<outline text="const year = 2022;" created="Mon, 27 Mar 2023 14:54:24 GMT"/>
				<outline text="const sourcefolder = config.user.prefs.githubfolder + &quot;Scripting-News/blog/opml/&quot; + year + &quot;/&quot;;"/>
				<outline text="const destfolder = config.user.prefs.homefolder + &quot;tmp/opmltextfiles/&quot; + year + &quot;/&quot;;"/>
				<outline text="file.loop (sourcefolder, function (f) {" created="Sun, 26 Mar 2023 15:36:01 GMT">
					<outline text="console.log (&quot;file.loop: f == &quot; + f);" created="Sun, 26 Mar 2023 16:31:59 GMT"/>
					<outline text="if (string.endsWith (f, &quot;.opml&quot;)) {" created="Sun, 26 Mar 2023 15:36:34 GMT">
						<outline text="const opmltext = file.readWholeFile (f);" created="Sun, 26 Mar 2023 14:40:22 GMT"/>
						<outline text="const theOutline = opml.parse (opmltext);" created="Sun, 26 Mar 2023 15:37:15 GMT"/>
						<outline text="" created="Sun, 26 Mar 2023 15:39:19 GMT"/>
						<outline text="var relpath = string.delete (f, 1, sourcefolder.length);" created="Sun, 26 Mar 2023 15:36:53 GMT"/>
						<outline text="relpath = string.replaceAll (relpath, &quot;.opml&quot;, &quot;.json&quot;)" created="Sun, 26 Mar 2023 14:47:21 GMT"/>
						<outline text="" created="Sun, 26 Mar 2023 15:36:54 GMT"/>
						<outline text="const fdest = destfolder + relpath;" created="Sun, 26 Mar 2023 14:42:53 GMT"/>
						<outline text="file.sureFilePath (fdest)" created="Sun, 26 Mar 2023 14:43:02 GMT"/>
						<outline text="" created="Sun, 26 Mar 2023 15:39:50 GMT"/>
						<outline text="var jsontext = json.stringify (theOutline);" created="Sun, 26 Mar 2023 15:39:51 GMT"/>
						<outline text="file.writeWholeFile (fdest, jsontext);" created="Sun, 26 Mar 2023 14:41:19 GMT"/>
						<outline text="" created="Sun, 26 Mar 2023 16:00:34 GMT"/>
						<outline text="console.log (fdest);" created="Sun, 26 Mar 2023 16:00:34 GMT"/>
						<outline text="}" created="Sun, 26 Mar 2023 15:36:45 GMT"/>
						</outline>
					<outline text="});" created="Sun, 26 Mar 2023 15:36:24 GMT"/>
					</outline>
				</outline>
			<outline text="examples/hello.belt" created="Tue, 21 Mar 2023 14:55:02 GMT">
				<outline text="console.log (&quot;Hello world.&quot;);" created="Tue, 21 Mar 2023 14:55:10 GMT"/>
				</outline>
			<outline text="examples/tenrandomslogans.belt" created="Wed, 22 Mar 2023 15:16:44 GMT">
				<outline text="for (var i = 1; i &lt;= 10; i++) {" created="Wed, 22 Mar 2023 15:16:53 GMT">
					<outline text="console.log (string.getRandomSnarkySlogan ());" created="Tue, 21 Mar 2023 14:55:10 GMT"/>
					<outline text="}" created="Wed, 22 Mar 2023 15:17:07 GMT"/>
					</outline>
				</outline>
			<outline text="examples/readfile.belt" created="Wed, 22 Mar 2023 15:16:44 GMT">
				<outline text="console.log (file.readWholeFile (&quot;data/tmp.txt&quot;))" created="Wed, 22 Mar 2023 15:22:21 GMT"/>
				</outline>
			<outline text="examples/s3write.belt" created="Wed, 22 Mar 2023 15:16:44 GMT">
				<outline text="const s3path = &quot;/scripting.com/tmp/belterdemo.txt&quot;;" created="Wed, 22 Mar 2023 16:05:55 GMT"/>
				<outline text="const filetext = file.readWholeFile (&quot;data/tmp.txt&quot;);" created="Wed, 22 Mar 2023 15:22:21 GMT"/>
				<outline text="console.log (&quot;s3.newObject == &quot; + s3.newObject (s3path, filetext));" created="Wed, 22 Mar 2023 16:05:03 GMT"/>
				<outline text="console.log (&quot;s3.getObject == &quot; + s3.getObject (s3path));" created="Wed, 22 Mar 2023 19:05:06 GMT"/>
				<outline text="console.log (&quot;s3.getObjectMetadata == &quot; + json.stringify (s3.getObjectMetadata (s3path)));" created="Wed, 22 Mar 2023 21:26:29 GMT"/>
				<outline text="console.log (&quot;s3.deleteObject == &quot; + s3.deleteObject (s3path));" created="Wed, 22 Mar 2023 19:05:06 GMT"/>
				</outline>
			<outline text="examples/writefile.belt" created="Wed, 22 Mar 2023 15:16:44 GMT">
				<outline text="file.writeWholeFile (&quot;data/tmp.txt&quot;, &quot;123&quot;)" created="Sun, 26 Mar 2023 17:50:07 GMT"/>
				</outline>
			<outline text="examples/s3llistobjects.belt" created="Wed, 22 Mar 2023 15:16:44 GMT">
				<outline text="const s3path = &quot;/scripting.com/misc/&quot;;" created="Wed, 22 Mar 2023 16:05:55 GMT"/>
				<outline text="var theList = s3.listObjects (s3path);" created="Wed, 22 Mar 2023 21:58:59 GMT"/>
				<outline text="console.log (json.stringify (theList));" created="Wed, 22 Mar 2023 22:01:41 GMT"/>
				</outline>
			<outline text="examples/httpread.belt" created="Wed, 22 Mar 2023 15:16:44 GMT">
				<outline text="const url = &quot;http://scripting.com/rss.xml&quot;;" created="Wed, 22 Mar 2023 16:05:55 GMT"/>
				<outline text="console.log (&quot;http.readUrl == &quot; + http.readUrl (url));" created="Wed, 22 Mar 2023 19:05:06 GMT"/>
				</outline>
			<outline text="examples/s3looper.belt" isComment="true" created="Wed, 22 Mar 2023 15:16:44 GMT">
				<outline text="const s3path = &quot;/scripting.com/tmp/&quot;;" created="Wed, 22 Mar 2023 16:05:55 GMT"/>
				<outline text="console.log (s3.listObjects (s3path));" created="Wed, 22 Mar 2023 21:58:59 GMT"/>
				</outline>
			<outline text="plugins/adder.js" created="Mon, 27 Mar 2023 15:03:54 GMT">
				<outline text="exports.addTwoValues = function (n1, n2) {" created="Mon, 27 Mar 2023 15:04:02 GMT">
					<outline text="return (n1 + n2);" created="Mon, 27 Mar 2023 15:04:17 GMT"/>
					<outline text="}" created="Mon, 27 Mar 2023 15:04:14 GMT"/>
					</outline>
				</outline>
			<outline text="examples/testplugin.belt" created="Mon, 27 Mar 2023 15:42:34 GMT">
				<outline text="console.log (plugins.adder.addTwoValues (12, 34));" created="Mon, 27 Mar 2023 15:42:42 GMT"/>
				</outline>
			<outline text="data/tmp.txt" created="Wed, 22 Mar 2023 15:24:16 GMT">
				<outline text="oh the buzzing of the bees" created="Wed, 22 Mar 2023 15:24:22 GMT"/>
				</outline>
			</outline>
		<outline text="build script" created="Sat, 26 Feb 2022 16:25:38 GMT">
			<outline text="nodeEditorSuite.utilities.buildBelterCommandline ()"/>
			</outline>
		</body>
	</opml>
