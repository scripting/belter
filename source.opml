<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- OPML generated by OPML Editor v10.1b19 on Sat, 25 Mar 2023 20:19:40 GMT -->

<!-- 
   Hi this is Dave Winer. I write all my project code in an outliner, which 
   generates all the files that make up this GitHub project. You'll see a 
   source.opml file like this in each of my projects. It contains the outline 
   source that the repo files were generated from. This is the most logical place 
   to store them. You can read the code in any outliner that supports OPML, which 
   includes http://drummer.scripting.com. You can use the Open URL command in 
   Drummer's File menu to open the "raw" version of this file straight from the 
   GitHub repo.
 -->

<opml version="2.0">
	<head>
		<title>nodeEditor: belterCommandLine2</title>
		<dateCreated>Thu, 24 Feb 2022 13:51:42 GMT</dateCreated>
		<dateModified>Sat, 25 Mar 2023 20:19:39 GMT</dateModified>
		<ownerName>Dave Winer</ownerName>
		<ownerId>http://davewiner.com/</ownerId>
		<expansionState>1, 7, 18</expansionState>
		<vertScrollState>1</vertScrollState>
		<windowTop>193</windowTop>
		<windowLeft>1131</windowLeft>
		<windowBottom>1062</windowBottom>
		<windowRight>2172</windowRight>
		</head>
	<body>
		<outline text="/scripting.com/code/beltercommandline/">
			<outline text="acorn.js" isComment="true" created="Tue, 21 Mar 2023 16:07:46 GMT">
				<outline text="[[http://scripting.com/publicfolder/code/jsParserForLO2/acorn.js]]"/>
				</outline>
			<outline text="package.json">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;belterCommandLine&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.4.0&quot;,"/>
					<outline text="&quot;main&quot;: &quot;cli.js&quot;,"/>
					<outline text="&quot;bin&quot;: {">
						<outline text="&quot;belt&quot;: &quot;cli.js&quot;"/>
						<outline text="},"/>
						</outline>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;daveutils&quot;: &quot;*&quot;,"/>
						<outline text="&quot;daves3&quot;: &quot;*&quot;,"/>
						<outline text="&quot;aws-sdk&quot;: &quot;*&quot;," isComment="true"/>
						<outline text="&quot;child_process&quot;: &quot;*&quot;,"/>
						<outline text="&quot;colors&quot;: &quot;*&quot;,"/>
						<outline text="&quot;acorn&quot;: &quot;*&quot;," created="Tue, 21 Mar 2023 16:14:27 GMT"/>
						<outline text="&quot;escodegen&quot;: &quot;*&quot;," created="Tue, 21 Mar 2023 16:14:27 GMT"/>
						<outline text="&quot;request&quot;: &quot;*&quot;"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="belter.js" created="Tue, 21 Mar 2023 15:36:09 GMT">
				<outline text="exports.runScriptText= runScriptText;"/>
				<outline text="" created="Wed, 22 Mar 2023 16:50:35 GMT"/>
				<outline text="require (&quot;aws-sdk/lib/maintenance_mode_message&quot;).suppress = true;" isComment="true"/>
				<outline text="" isComment="true" created="Wed, 22 Mar 2023 18:50:38 GMT"/>
				<outline text="const aws = require (&quot;aws-sdk&quot;);" isComment="true"/>
				<outline text="" isComment="true" created="Tue, 21 Mar 2023 16:09:41 GMT"/>
				<outline text="const fs = require (&quot;fs&quot;);"/>
				<outline text="const utils = require (&quot;daveutils&quot;);"/>
				<outline text="const daves3 = require (&quot;daves3&quot;);"/>
				<outline text="const request = require (&quot;request&quot;);"/>
				<outline text="const escodegen = require (&quot;escodegen&quot;);" created="Tue, 21 Mar 2023 16:09:09 GMT"/>
				<outline text="const acorn = require (&quot;acorn&quot;);" created="Tue, 21 Mar 2023 16:09:09 GMT"/>
				<outline text="" created="Tue, 21 Mar 2023 16:22:55 GMT"/>
				<outline text="[[http://fargo.io/code/node/shared/utils.js]]" isComment="true"/>
				<outline text="[[http://scripting.com/code/concord/concordscript/scripting.js]]" created="Tue, 21 Mar 2023 15:59:30 GMT"/>
				<outline text="[[http://scripting.com/code/concord/concordscript/verbs.js]]" isComment="true" created="Tue, 21 Mar 2023 15:59:30 GMT"/>
				<outline text="" created="Wed, 22 Mar 2023 16:51:11 GMT"/>
				<outline text="function httpRequest (url, callback) {">
					<outline text="request (url, function (err, response, data) {">
						<outline text="if (err) {" created="Sun, 08 Aug 2021 15:33:13 GMT">
							<outline text="callback (err);" created="Sun, 08 Aug 2021 15:33:17 GMT"/>
							<outline text="}" created="Sun, 08 Aug 2021 15:33:20 GMT"/>
							</outline>
						<outline text="else {" created="Sun, 08 Aug 2021 15:33:21 GMT">
							<outline text="var code = response.statusCode;" created="Tue, 04 Jan 2022 22:39:15 GMT"/>
							<outline text="if ((code &lt; 200) || (code &gt; 299)) {" created="Sun, 08 Aug 2021 15:33:23 GMT">
								<outline text="const message = &quot;The request returned a status code of &quot; + response.statusCode + &quot;.&quot;;" created="Sun, 08 Aug 2021 15:34:06 GMT"/>
								<outline text="callback ({message});" created="Sun, 08 Aug 2021 15:34:43 GMT"/>
								<outline text="}" created="Sun, 08 Aug 2021 15:33:28 GMT"/>
								</outline>
							<outline text="else {" created="Sun, 08 Aug 2021 15:33:29 GMT">
								<outline text="callback (undefined, data) "/>
								<outline text="}" created="Sun, 08 Aug 2021 15:33:31 GMT"/>
								</outline>
							<outline text="}" created="Sun, 08 Aug 2021 15:33:33 GMT"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="" created="Wed, 22 Mar 2023 15:15:02 GMT"/>
				<outline text="const string = {" created="Wed, 22 Mar 2023 15:15:02 GMT">
					<outline text="getRandomSnarkySlogan: utils.getRandomSnarkySlogan" created="Wed, 22 Mar 2023 15:15:26 GMT"/>
					<outline text="};" created="Wed, 22 Mar 2023 15:15:13 GMT"/>
					</outline>
				<outline text="const file = {" created="Wed, 22 Mar 2023 15:18:47 GMT">
					<outline text="readWholeFile: function (f) {" created="Wed, 22 Mar 2023 15:18:52 GMT">
						<outline text="return new Promise (function (resolve, reject) {">
							<outline text="fs.readFile (f, function (err, filetext) {" created="Wed, 22 Mar 2023 15:19:35 GMT">
								<outline text="if (err) {" created="Sat, 20 Feb 2021 17:20:29 GMT">
									<outline text="reject (err);" created="Sat, 20 Feb 2021 18:06:44 GMT"/>
									<outline text="}" created="Sat, 20 Feb 2021 17:20:36 GMT"/>
									</outline>
								<outline text="else {" created="Sat, 20 Feb 2021 17:20:36 GMT">
									<outline text="resolve (filetext.toString ()); "/>
									<outline text="}" created="Sat, 20 Feb 2021 17:20:38 GMT"/>
									</outline>
								<outline text="});" created="Wed, 22 Mar 2023 15:19:55 GMT"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}" created="Wed, 22 Mar 2023 15:19:09 GMT"/>
						</outline>
					<outline text="}" created="Wed, 22 Mar 2023 15:19:12 GMT"/>
					</outline>
				<outline text="const s3 = {" created="Wed, 22 Mar 2023 15:18:47 GMT">
					<outline text="newObject: function (path, data, type=&quot;text/plain&quot;, acl=&quot;public-read&quot;, metadata=undefined) {" created="Wed, 22 Mar 2023 15:18:52 GMT">
						<outline text="return new Promise (function (resolve, reject) {">
							<outline text="daves3.newObject (path, data, type, acl, function (err, data) {">
								<outline text="if (err) {" created="Sat, 20 Feb 2021 17:20:29 GMT">
									<outline text="reject (err);" created="Sat, 20 Feb 2021 18:06:44 GMT"/>
									<outline text="}" created="Sat, 20 Feb 2021 17:20:36 GMT"/>
									</outline>
								<outline text="else {" created="Sat, 20 Feb 2021 17:20:36 GMT">
									<outline text="resolve (true); "/>
									<outline text="}" created="Sat, 20 Feb 2021 17:20:38 GMT"/>
									</outline>
								<outline text="}, metadata);" created="Wed, 22 Mar 2023 16:01:48 GMT"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}," created="Wed, 22 Mar 2023 15:19:09 GMT"/>
						</outline>
					<outline text="getObject: function (path) {" created="Wed, 22 Mar 2023 15:18:52 GMT">
						<outline text="return new Promise (function (resolve, reject) {">
							<outline text="daves3.getObject (path, function (err, data) {">
								<outline text="if (err) {" created="Sat, 20 Feb 2021 17:20:29 GMT">
									<outline text="reject (err);" created="Sat, 20 Feb 2021 18:06:44 GMT"/>
									<outline text="}" created="Sat, 20 Feb 2021 17:20:36 GMT"/>
									</outline>
								<outline text="else {" created="Sat, 20 Feb 2021 17:20:36 GMT">
									<outline text="resolve (data.Body.toString ()); "/>
									<outline text="}" created="Sat, 20 Feb 2021 17:20:38 GMT"/>
									</outline>
								<outline text="});" created="Wed, 22 Mar 2023 16:01:48 GMT"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}," created="Wed, 22 Mar 2023 15:19:09 GMT"/>
						</outline>
					<outline text="getObjectMetadata: function (path) {" created="Wed, 22 Mar 2023 15:18:52 GMT">
						<outline text="return new Promise (function (resolve, reject) {">
							<outline text="daves3.getObjectMetadata (path, function (err, data) {">
								<outline text="if (err) {" created="Sat, 20 Feb 2021 17:20:29 GMT">
									<outline text="reject (err);" created="Sat, 20 Feb 2021 18:06:44 GMT"/>
									<outline text="}" created="Sat, 20 Feb 2021 17:20:36 GMT"/>
									</outline>
								<outline text="else {" created="Sat, 20 Feb 2021 17:20:36 GMT">
									<outline text="resolve (data); "/>
									<outline text="}" created="Sat, 20 Feb 2021 17:20:38 GMT"/>
									</outline>
								<outline text="}, true);" created="Wed, 22 Mar 2023 16:01:48 GMT"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}," created="Wed, 22 Mar 2023 15:19:09 GMT"/>
						</outline>
					<outline text="deleteObject: function (path) {" created="Wed, 22 Mar 2023 15:18:52 GMT">
						<outline text="return new Promise (function (resolve, reject) {">
							<outline text="daves3.deleteObject (path, function (err) {">
								<outline text="if (err) {" created="Sat, 20 Feb 2021 17:20:29 GMT">
									<outline text="reject (err);" created="Sat, 20 Feb 2021 18:06:44 GMT"/>
									<outline text="}" created="Sat, 20 Feb 2021 17:20:36 GMT"/>
									</outline>
								<outline text="else {" created="Sat, 20 Feb 2021 17:20:36 GMT">
									<outline text="resolve (true); "/>
									<outline text="}" created="Sat, 20 Feb 2021 17:20:38 GMT"/>
									</outline>
								<outline text="});" created="Wed, 22 Mar 2023 16:01:48 GMT"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}," created="Wed, 22 Mar 2023 15:19:09 GMT"/>
						</outline>
					<outline text="listObjects: function (path, callback) {" created="Wed, 22 Mar 2023 15:18:52 GMT">
						<outline text="return new Promise (function (resolve, reject) {">
							<outline text="var theList = new Array ();"/>
							<outline text="daves3.listObjects (path, function (item) {">
								<outline text="if (item.flLastObject !== undefined) {" created="Sat, 22 Mar 2014 16:41:13 GMT" pgfnum="39728">
									<outline text="resolve (theList);"/>
									<outline text="}" created="Sat, 22 Mar 2014 16:41:27 GMT" pgfnum="39731"/>
									</outline>
								<outline text="else {" created="Sat, 22 Mar 2014 16:41:28 GMT" pgfnum="39732">
									<outline text="theList.push (item.s3path);"/>
									<outline text="}" created="Sat, 22 Mar 2014 16:41:30 GMT" pgfnum="39733"/>
									</outline>
								<outline text="});" created="Wed, 22 Mar 2023 16:01:48 GMT"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}," created="Wed, 22 Mar 2023 15:19:09 GMT"/>
						</outline>
					<outline text="}" created="Wed, 22 Mar 2023 15:19:12 GMT"/>
					</outline>
				<outline text="const json = {" created="Wed, 22 Mar 2023 21:29:52 GMT">
					<outline text="stringify: function (obj) {" created="Wed, 22 Mar 2023 21:30:00 GMT">
						<outline text="return (utils.jsonStringify (obj));" created="Wed, 22 Mar 2023 21:30:15 GMT"/>
						<outline text="}" created="Wed, 22 Mar 2023 21:30:11 GMT"/>
						</outline>
					<outline text="}" created="Wed, 22 Mar 2023 21:29:56 GMT"/>
					</outline>
				<outline text="const http = {" created="Mon, 11 Jan 2021 21:29:43 GMT">
					<outline text="readUrl: function (url) {" created="Mon, 11 Jan 2021 21:29:44 GMT">
						<outline text="return new Promise (function (resolve, reject) {" created="Wed, 22 Mar 2023 22:17:15 GMT">
							<outline text="httpRequest (url, function (err, data) {" created="Thu, 17 Jun 2021 19:56:51 GMT">
								<outline text="if (err) {" created="Sun, 08 Aug 2021 15:12:18 GMT">
									<outline text="reject (err);" created="Sun, 08 Aug 2021 15:14:05 GMT"/>
									<outline text="}" created="Sun, 08 Aug 2021 15:14:10 GMT"/>
									</outline>
								<outline text="else {" created="Sun, 08 Aug 2021 15:12:29 GMT">
									<outline text="resolve (data.toString ()); "/>
									<outline text="}" created="Sun, 08 Aug 2021 15:12:31 GMT"/>
									</outline>
								<outline text="})" created="Thu, 17 Jun 2021 19:58:33 GMT"/>
								</outline>
							<outline text="});" created="Wed, 22 Mar 2023 22:17:15 GMT"/>
							</outline>
						<outline text="},"/>
						</outline>
					<outline text="derefUrl: function (url) { //9/17/21 by DW" isComment="true">
						<outline text="return new Promise (function (resolve, reject) {">
							<outline text="servercall (&quot;derefurl&quot;, {url}, true, function (err, data) {">
								<outline text="if (err) {" created="Sat, 20 Feb 2021 17:20:29 GMT">
									<outline text="reject (err);" created="Sat, 20 Feb 2021 18:06:44 GMT"/>
									<outline text="}" created="Sat, 20 Feb 2021 17:20:36 GMT"/>
									</outline>
								<outline text="else {" created="Sat, 20 Feb 2021 17:20:36 GMT">
									<outline text="resolve (data.longurl); "/>
									<outline text="}" created="Sat, 20 Feb 2021 17:20:38 GMT"/>
									</outline>
								<outline text="});" created="Sat, 20 Feb 2021 17:20:14 GMT"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="},"/>
						</outline>
					<outline text="client: function (options, flUseProxyServer=true) { //11/5/21 by DW" isComment="true" created="Mon, 11 Jan 2021 21:29:44 GMT">
						<outline text="Changes" isComment="true" created="Mon, 09 Aug 2021 20:27:31 GMT">
							<outline text="11/8/21; 9:30:48 AM by DW" created="Mon, 08 Nov 2021 14:30:47 GMT">
								<outline text="We provide a user-agent header, which can be overridden." created="Mon, 08 Nov 2021 14:30:48 GMT"/>
								</outline>
							<outline text="11/7/21; 10:04:26 AM by DW" created="Sun, 07 Nov 2021 15:04:25 GMT">
								<outline text="Implement headers. If the caller provides headers, we add them to the headers in the request, we don't overwrite the whole collection of headers. That way if later we want to initialize the headers with something that identifies the request as coming from Drummer, we can just add it to the default request struct. " created="Sun, 07 Nov 2021 15:04:26 GMT"/>
								</outline>
							<outline text="11/5/21; 11:43:37 AM by DW" created="Mon, 09 Aug 2021 20:27:36 GMT">
								<outline text="A work in progress. The goal is to eventually have all the features of HTTP available to scripts running in Drummer. " created="Fri, 05 Nov 2021 15:43:45 GMT"/>
								<outline text="The names of values in the options struct come from the defiinitions for the jQuery call." created="Thu, 04 Nov 2021 18:35:38 GMT">
									<outline text="https://www.w3schools.com/jquery/ajax_ajax.asp" created="Thu, 04 Nov 2021 18:36:03 GMT"/>
									</outline>
								</outline>
							<outline text="8/2/21; 2:19:56 PM by DW" created="Mon, 02 Aug 2021 18:19:55 GMT">
								<outline text="If filedata is not a PlainObject or a string, convert it to a string." created="Mon, 02 Aug 2021 18:19:58 GMT"/>
								</outline>
							</outline>
						<outline text="var request = { //defaults" created="Thu, 04 Nov 2021 18:26:27 GMT">
							<outline text="type: &quot;GET&quot;," created="Thu, 04 Nov 2021 18:21:52 GMT"/>
							<outline text="url: undefined, //defaults to the current page" created="Thu, 04 Nov 2021 18:36:51 GMT"/>
							<outline text="data: undefined," created="Thu, 04 Nov 2021 18:27:23 GMT"/>
							<outline text="params: undefined," created="Thu, 04 Nov 2021 18:22:23 GMT"/>
							<outline text="headers: {">
								<outline text="&quot;User-Agent&quot;: drummer.productname () + &quot; v&quot; + drummer.version ()"/>
								<outline text="}"/>
								</outline>
							<outline text="}" created="Thu, 04 Nov 2021 18:26:40 GMT"/>
							</outline>
						<outline text="if (options.headers !== undefined) { //11/7/21 by DW" created="Sun, 07 Nov 2021 15:02:49 GMT">
							<outline text="for (var x in options.headers) {" created="Thu, 04 Nov 2021 18:26:27 GMT">
								<outline text="request.headers [x] = options.headers [x];" created="Thu, 04 Nov 2021 18:27:45 GMT"/>
								<outline text="}" created="Thu, 04 Nov 2021 18:27:57 GMT"/>
								</outline>
							<outline text="}" created="Sun, 07 Nov 2021 15:03:01 GMT"/>
							</outline>
						<outline text="for (var x in options) {" created="Thu, 04 Nov 2021 18:26:27 GMT">
							<outline text="if (x != &quot;headers&quot;) {" created="Sun, 07 Nov 2021 15:04:04 GMT">
								<outline text="request [x] = options [x];" created="Thu, 04 Nov 2021 18:27:45 GMT"/>
								<outline text="}" created="Sun, 07 Nov 2021 15:04:11 GMT"/>
								</outline>
							<outline text="}" created="Thu, 04 Nov 2021 18:27:57 GMT"/>
							</outline>
						<outline text="if (request.data !== undefined) {" created="Thu, 04 Nov 2021 18:26:27 GMT">
							<outline text="if (!$.isPlainObject (request.data) &amp;&amp; (typeof (request.data) != &quot;string&quot;)) { //8/2/21 by DW" created="Mon, 02 Aug 2021 18:36:54 GMT">
								<outline text="request.data = request.data.toString ();" created="Mon, 02 Aug 2021 18:38:49 GMT"/>
								<outline text="}" created="Mon, 02 Aug 2021 18:38:43 GMT"/>
								</outline>
							<outline text="}" created="Thu, 04 Nov 2021 18:28:51 GMT"/>
							</outline>
						<outline text="if (request.params !== undefined) {" created="Thu, 04 Nov 2021 18:31:21 GMT">
							<outline text="request.url += &quot;?&quot; + drummerBuildParamList (request.params);" created="Wed, 03 Nov 2021 15:06:40 GMT"/>
							<outline text="}" created="Thu, 04 Nov 2021 18:31:33 GMT"/>
							</outline>
						<outline text="if (flUseProxyServer) {" created="Fri, 05 Nov 2021 15:24:35 GMT">
							<outline text="return new Promise (function (resolve, reject) {">
								<outline text="var proxyRequest = {" created="Fri, 05 Nov 2021 15:25:29 GMT">
									<outline text="method: request.type," created="Thu, 31 Jul 2014 16:39:06 GMT" pgfnum="43067"/>
									<outline text="url: request.url," created="Thu, 31 Jul 2014 16:39:22 GMT" pgfnum="43070"/>
									<outline text="body: request.data," created="Fri, 05 Nov 2021 15:40:30 GMT"/>
									<outline text="headers: request.headers" created="Sun, 07 Nov 2021 15:38:15 GMT"/>
									<outline text="};" created="Fri, 05 Nov 2021 15:25:41 GMT"/>
									</outline>
								<outline text="var jsontext = jsonStringify (proxyRequest);" created="Fri, 05 Nov 2021 16:02:26 GMT"/>
								<outline text="servercall (&quot;httprequest&quot;, {request: jsontext}, true, function (err, data) {">
									<outline text="if (err) {" created="Sat, 20 Feb 2021 17:20:29 GMT">
										<outline text="reject (err);" created="Sat, 20 Feb 2021 18:06:44 GMT"/>
										<outline text="}" created="Sat, 20 Feb 2021 17:20:36 GMT"/>
										</outline>
									<outline text="else {" created="Sat, 20 Feb 2021 17:20:36 GMT">
										<outline text="resolve (data); "/>
										<outline text="}" created="Sat, 20 Feb 2021 17:20:38 GMT"/>
										</outline>
									<outline text="});" created="Sat, 20 Feb 2021 17:20:14 GMT"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}" created="Fri, 05 Nov 2021 15:24:51 GMT"/>
							</outline>
						<outline text="else {" created="Mon, 09 Aug 2021 20:29:06 GMT">
							<outline text="return new Promise (function (resolve, reject) {">
								<outline text="$.ajax (request)">
									<outline text=".success (function (data, status) { ">
										<outline text="resolve (data); "/>
										<outline text="}) "/>
										</outline>
									<outline text=".error (function (status) { ">
										<outline text="var err = JSON.parse (status.responseText);" created="Thu, 04 Nov 2021 19:00:53 GMT"/>
										<outline text="reject (err);" created="Thu, 04 Nov 2021 18:55:19 GMT"/>
										<outline text="});"/>
										</outline>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}" created="Mon, 09 Aug 2021 20:29:08 GMT"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="cli.js">
				<outline text="#!/usr/bin/env node"/>
				<outline text=""/>
				<outline text="const myVersion = &quot;0.4.0&quot;, myProductName = &quot;belterCommandLine&quot;, shortProductName = &quot;belt&quot;; " created="Mon, 03 Feb 2014 03:21:03 GMT" pgfnum="36831"/>
				<outline text=""/>
				<outline text="Changes" isComment="true">
					<outline text="2/4/21; 11:28:37 AM by DW">
						<outline text="Look for config.json in the directory we were launched from not the cwd. "/>
						</outline>
					</outline>
				<outline text=""/>
				<outline text="const fs = require (&quot;fs&quot;); "/>
				<outline text="const utils = require (&quot;daveutils&quot;);"/>
				<outline text="const request = require (&quot;request&quot;);"/>
				<outline text="const childProcess = require (&quot;child_process&quot;);"/>
				<outline text="const colors = require (&quot;colors&quot;);"/>
				<outline text="const belter = require (&quot;./belter.js&quot;); " created="Tue, 21 Mar 2023 15:35:50 GMT"/>
				<outline text=""/>
				<outline text="var config = { ">
					<outline text="myDir: __dirname" created="Wed, 22 Mar 2023 15:30:59 GMT"/>
					<outline text="domain: &quot;localhost&quot;,  " isComment="true"/>
					<outline text="port: 1349   " isComment="true"/>
					<outline text="};"/>
					</outline>
				<outline text=""/>
				<outline text="function runningTime (whenstart) { //6/16/20 by DW" isComment="true">
					<outline text="whenstart = new Date (whenstart);"/>
					<outline text="var obj = utils.howLongSinceStart (whenstart);"/>
					<outline text="console.log (&quot;runningTime: obj == &quot; + utils.jsonStringify (obj));"/>
					<outline text=""/>
					<outline text="var secs = utils.secondsSince (whenstart);"/>
					<outline text="const secsPerMinute = 60;"/>
					<outline text="const secsPerHour = 60 * 60;"/>
					<outline text="const secsPerDay = 24 *60 * 60;"/>
					<outline text=""/>
					<outline text=""/>
					<outline text="if (obj.years !== undefined) {">
						<outline text="return ((secs / secsPerYear) + &quot; years.&quot;);"/>
						<outline text="}"/>
						</outline>
					<outline text="if (obj.months !== undefined) {">
						<outline text="return ((secs / secsPerMonth) + &quot; months.&quot;);"/>
						<outline text="}"/>
						</outline>
					<outline text="if (obj.days !== undefined) {">
						<outline text="return ((secs / secsPerDay) + &quot; days.&quot;);"/>
						<outline text="}"/>
						</outline>
					<outline text="if (obj.hours !== undefined) {">
						<outline text="return ((secs / secsPerHour) + &quot; hours.&quot;);"/>
						<outline text="}"/>
						</outline>
					<outline text="if (obj.minutes !== undefined) {">
						<outline text="return ((secs / secsPerMinute) + &quot; minutes.&quot;);"/>
						<outline text="}"/>
						</outline>
					<outline text="return (secs + &quot; seconds.&quot;);"/>
					<outline text=""/>
					<outline text="runningTime: obj == {"/>
					<outline text="&quot;years&quot;: 0,"/>
					<outline text="&quot;months&quot;: 0,"/>
					<outline text="&quot;days&quot;: 1,"/>
					<outline text="&quot;hours&quot;: 6,"/>
					<outline text="&quot;minutes&quot;: 43,"/>
					<outline text="&quot;seconds&quot;: 44"/>
					<outline text="}"/>
					<outline text=""/>
					<outline text=""/>
					<outline text=""/>
					<outline text="return (whenstart);"/>
					<outline text="}"/>
					</outline>
				<outline text="function formatDate (theDate, dateformat, timezone) { //8/28/14 by DW" isComment="true" created="Wed, 04 Dec 2013 19:46:43 GMT" pgfnum="33129">
					<outline text="if (theDate === undefined) {">
						<outline text="theDate = new Date ();"/>
						<outline text="}"/>
						</outline>
					<outline text="if (dateformat === undefined) {">
						<outline text="dateformat = &quot;%c&quot;;"/>
						<outline text="}"/>
						</outline>
					<outline text="if (timezone === undefined) {">
						<outline text="timezone =  - (new Date ().getTimezoneOffset () / 60);"/>
						<outline text="}"/>
						</outline>
					<outline text="try {" created="Thu, 13 Jun 2013 22:19:31 GMT" pgfnum="4655">
						<outline text="var offset = new Number (timezone);" created="Thu, 13 Jun 2013 21:39:14 GMT" pgfnum="4646"/>
						<outline text="var d = new Date (theDate);" created="Thu, 13 Jun 2013 21:24:44 GMT" pgfnum="4636"/>
						<outline text="var localTime = d.getTime ();" created="Thu, 13 Jun 2013 21:29:10 GMT" pgfnum="4638"/>
						<outline text="var localOffset = d.getTimezoneOffset () *  60000;" created="Thu, 13 Jun 2013 21:29:18 GMT" pgfnum="4639"/>
						<outline text="var utc = localTime + localOffset;" created="Thu, 13 Jun 2013 21:30:17 GMT" pgfnum="4640"/>
						<outline text="var newTime = utc + (3600000 * offset);"/>
						<outline text="return (new Date (newTime).strftime (dateformat));" created="Thu, 13 Jun 2013 21:31:02 GMT" pgfnum="4641"/>
						<outline text="}" created="Thu, 13 Jun 2013 22:19:58 GMT" pgfnum="4659"/>
						</outline>
					<outline text="catch (tryerror) {" created="Thu, 13 Jun 2013 22:19:41 GMT" pgfnum="4656">
						<outline text="console.log (theDate);"/>
						<outline text="return (new Date (theDate).strftime (dateformat));" created="Thu, 13 Jun 2013 22:19:50 GMT" pgfnum="4657"/>
						<outline text="}" created="Thu, 13 Jun 2013 22:19:51 GMT" pgfnum="4658"/>
						</outline>
					<outline text="}" created="Wed, 04 Dec 2013 19:47:03 GMT" pgfnum="33133"/>
					</outline>
				<outline text="function pad (val, withchar, ctplaces, flleftalign) {">
					<outline text="var s = (val === undefined) ? &quot;&quot; : val.toString ();" created="Thu, 06 Jun 2013 19:04:50 GMT" pgfnum="25301"/>
					<outline text="var s = val.toString ();" isComment="true" created="Thu, 06 Jun 2013 19:04:50 GMT" pgfnum="25301"/>
					<outline text="while (s.length &lt; ctplaces) {" created="Thu, 06 Jun 2013 19:04:23 GMT" pgfnum="25299">
						<outline text="if (flleftalign) {">
							<outline text="s = s + withchar;" created="Thu, 06 Jun 2013 19:05:07 GMT" pgfnum="25302"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="s = withchar + s;" created="Thu, 06 Jun 2013 19:05:07 GMT" pgfnum="25302"/>
							<outline text="}"/>
							</outline>
						<outline text="}" created="Thu, 06 Jun 2013 19:04:43 GMT" pgfnum="25300"/>
						</outline>
					<outline text="return (s);" created="Thu, 06 Jun 2013 19:12:58 GMT" pgfnum="25311"/>
					<outline text="}"/>
					</outline>
				<outline text="function readJsonFile (path, callback) {">
					<outline text="utils.sureFilePath (path, function () {">
						<outline text="fs.readFile (path, function (err, data) {">
							<outline text="var theObject = undefined;"/>
							<outline text="if (err) {">
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="try {">
									<outline text="theObject = JSON.parse (data);"/>
									<outline text="}"/>
									</outline>
								<outline text="catch (err) {">
									<outline text="console.log (&quot;readJsonFile: err.message == &quot; + err.message);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="callback (theObject);"/>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function doCommand (theCommand, callback) {">
					<outline text="var url = &quot;http://&quot; + config.domain + &quot;:&quot; + config.port + &quot;/&quot; + theCommand;"/>
					<outline text="console.log (&quot;doCommand: url == &quot; + url);" isComment="true"/>
					<outline text="request (url, function (err, response, data) { ">
						<outline text="if (err) {">
							<outline text="callback (err);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="if (response.statusCode != 200) {">
								<outline text="callback ({message: &quot;Error: &quot; + data.toString ()});"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="callback (undefined, data.toString ());"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function getProcessList (callback) {">
					<outline text="doCommand (&quot;list&quot;, function (err, val) {">
						<outline text="if (err) {">
							<outline text="callback (err);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="try {">
								<outline text="console.log (&quot;getProcessList: val == &quot; + val);" isComment="true"/>
								<outline text="var jstruct = JSON.parse (val);"/>
								<outline text="callback (undefined, jstruct);"/>
								<outline text="}"/>
								</outline>
							<outline text="catch (err) {">
								<outline text="callback (err);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function rescanCommand (callback) {">
					<outline text="doCommand (&quot;rescan&quot;, function (err, val) {">
						<outline text="if (err) {">
							<outline text="callback (err);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="try {">
								<outline text="console.log (&quot;rescanCommand: val == &quot; + val);" isComment="true"/>
								<outline text="var jstruct = JSON.parse (val);"/>
								<outline text="callback (undefined, jstruct);"/>
								<outline text="}"/>
								</outline>
							<outline text="catch (err) {">
								<outline text="callback (err);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function getProcessInfo (ixProcess, callback) {">
					<outline text="ixProcess = Number (ixProcess);"/>
					<outline text="getProcessList (function (err, theList) {">
						<outline text="if (err) {">
							<outline text="callback (err);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="if (ixProcess &lt; theList.length) {">
								<outline text="callback (undefined, theList [ixProcess]);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="var s = (theList.length == 1) ? &quot;there is only &quot; + theList.length + &quot; process&quot; : &quot;there are only &quot; + theList.length + &quot; processes&quot;"/>
								<outline text="callback ({message: &quot;Can't find process #&quot; + ixProcess + &quot; because &quot; + s + &quot; in the list.&quot;});"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function applyToProcessCommand (ixProcess, theCommand, callback) {">
					<outline text="getProcessInfo (ixProcess, function (err, theProcess) {">
						<outline text="if (err) {">
							<outline text="callback (err);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="if ((!theProcess.running) &amp;&amp; (theCommand == &quot;stop&quot;)) {">
								<outline text="if (callback !== undefined) {">
									<outline text="callback ({message: &quot;Can't stop the process because it isn't running.&quot;});"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="doCommand (theCommand + &quot;?file=&quot; + theProcess.file, callback);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="getProcessList (function (err, theList) {" isComment="true">
						<outline text="if (err) {">
							<outline text="callback (err);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="var ixProcessToStop = Number (ixProcess);"/>
							<outline text="if (ixProcessToStop &lt; theList.length) {">
								<outline text="var theProcess = theList [ixProcessToStop];"/>
								<outline text="if (!theProcess.running) {">
									<outline text="if (callback !== undefined) {">
										<outline text="callback ({message: &quot;Can't stop the process because it isn't running.&quot;});"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="doCommand (theCommand + &quot;?file=&quot; + theProcess.file, callback);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="callback ({message: &quot;There aren't enough processes.&quot;});"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="doCommand (&quot;list&quot;, function (err, val) {" isComment="true">
						<outline text="if (err) {">
							<outline text="console.log (err.message);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="var jstruct = JSON.parse (val);"/>
							<outline text="var ixProcessToStop = Number (ixProcess);"/>
							<outline text="if (ixProcessToStop &lt; jstruct.length) {">
								<outline text="var theProcess = jstruct [ixProcessToStop];"/>
								<outline text="doCommand (theCommand + &quot;?file=&quot; + theProcess.file, function (err, val) {">
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="console.log (&quot;There aren't that many processes.&quot;);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function stopCommand (ixProcess, callback) {">
					<outline text="applyToProcessCommand (ixProcess, &quot;stop&quot;, function (err, msg) {">
						<outline text="if (err) {">
							<outline text="console.log (&quot;\n&quot; + err.message + &quot;\n&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="console.log (&quot;\n&quot; + msg + &quot;\n&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function restartCommand (ixProcess, callback) {">
					<outline text="console.log (&quot;restartCommand&quot;);"/>
					<outline text="applyToProcessCommand (ixProcess, &quot;restart&quot;, function (err, msg) {">
						<outline text="if (err) {">
							<outline text="console.log (&quot;\n&quot; + err.message + &quot;\n&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="console.log (&quot;\n&quot; + msg + &quot;\n&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function logCommand (ixProcess) { //start scrolling the log for the indicated process">
					<outline text="getProcessInfo (ixProcess, function (err, theProcess) {">
						<outline text="if (err) {">
							<outline text="console.log (err);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="var theProcess = childProcess.spawn (&quot;tail&quot;, [&quot;-f&quot;, theProcess.logfile]);"/>
							<outline text="theProcess.stdout.on (&quot;data&quot;, function (linetext) {">
								<outline text="linetext = linetext.toString ();"/>
								<outline text="console.log (utils.trimWhitespace (linetext));"/>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="getProcessList (function (err, theList) {" isComment="true">
						<outline text="if (err) {">
							<outline text="console.log (err.message);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="var ixProcessToWatch = Number (ixProcess);"/>
							<outline text="if (ixProcessToWatch &lt; theList.length) {">
								<outline text="var theProcess = theList [ixProcessToWatch];"/>
								<outline text="var bashCommand = &quot;tail -f &quot; + theProcess.logfile;"/>
								<outline text="console.log (bashCommand);"/>
								<outline text="childProcess.exec (bashCommand);"/>
								<outline text=""/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="console.log (&quot;There aren't enough processes.&quot;);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function listCommand () {">
					<outline text="Changes" isComment="true">
						<outline text="6/16/20; 12:19:01 PM by DW">
							<outline text="What a mess. utils.getFacebookTimeString doesn't work on servers because strftime is not implemented. It can be and should, but it has to be done carefully. "/>
							</outline>
						<outline text="6/16/20; 11:03:07 AM by DW">
							<outline text="Add one to &quot;restarts&quot; because the column title says &quot;starts.&quot;"/>
							</outline>
						<outline text="6/13/20; 10:53:40 AM by DW">
							<outline text="If no domain is specified, list it, with the domain blank."/>
							</outline>
						</outline>
					<outline text=""/>
					<outline text="//debugging -- 6/16/20 by DW" isComment="true">
						<outline text="var when = new Date (1592231497600); "/>
						<outline text="var timezone =  - (new Date ().getTimezoneOffset () / 60);"/>
						<outline text="console.log (&quot;timezone == &quot; + timezone);"/>
						<outline text="formatDate (when, &quot;%l:%M %p&quot;, -2);"/>
						</outline>
					<outline text=""/>
					<outline text="getProcessList (function (err, theList) {">
						<outline text="if (err) {">
							<outline text="console.log (&quot;\n&quot; + err.message + &quot;\n&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="function line (ix, domain, port, fname, logfile, restarts, runningtime, ctHits, whenLastHit, fltitleline) {">
								<outline text="const maxlengthdomain = 30;"/>
								<outline text="const maxlengthfname = 15;"/>
								<outline text="const maxlengthlogfile = 30;"/>
								<outline text="const maxlengthport = 5;"/>
								<outline text="const maxlengthrestarts = 6;"/>
								<outline text="const maxlengthcthits = 6;"/>
								<outline text="var s = &quot;&quot;;"/>
								<outline text="function pushval (val) {">
									<outline text="if (fltitleline) {">
										<outline text="val = val.blue.bold;"/>
										<outline text="}"/>
										</outline>
									<outline text="s += val + &quot; \t&quot;;"/>
									<outline text="}"/>
									</outline>
								<outline text=""/>
								<outline text="if (ix === undefined) {">
									<outline text="s += utils.filledString (&quot; &quot;, 7);"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="s += pad (&quot;[&quot; + ix + &quot;]&quot;, &quot; &quot; , 5) + &quot;: &quot;;"/>
									<outline text="}"/>
									</outline>
								<outline text=""/>
								<outline text="pushval (pad (domain, &quot; &quot;, maxlengthdomain, true));"/>
								<outline text="pushval (pad (port, &quot; &quot;, maxlengthport, true));"/>
								<outline text="pushval (pad (fname, &quot; &quot;, maxlengthfname, true));"/>
								<outline text="pushval (pad (logfile, &quot; &quot;, maxlengthlogfile, true));"/>
								<outline text="pushval (pad (ctHits, &quot; &quot;, maxlengthcthits, true));"/>
								<outline text="pushval (pad (restarts, &quot; &quot;, maxlengthrestarts, true));"/>
								<outline text="pushval (runningtime);"/>
								<outline text="console.log (s);"/>
								<outline text="}"/>
								</outline>
							<outline text="console.log (utils.jsonStringify (theList));" isComment="true"/>
							<outline text="console.log (&quot;\n&quot;);" isComment="true"/>
							<outline text="line (undefined, &quot;domain&quot;, &quot;port&quot;, &quot;fname&quot;, &quot;logfile&quot;, &quot;starts&quot;, &quot;last-start&quot;, &quot;hits&quot;, &quot;when&quot;, true);"/>
							<outline text="theList.forEach (function (item, ix) {">
								<outline text="console.log (utils.jsonStringify (item));" isComment="true"/>
								<outline text="var domain = (item.domain === undefined) ? &quot;&quot; : item.domain;"/>
								<outline text="var runningtime = item.running ? runningTime (item.ctime): &quot;STOPPED&quot;;" isComment="true"/>
								<outline text="var runningtime = item.running ? utils.howLongSinceStartAsString (new Date (item.ctime), false) : &quot;STOPPED&quot;;" isComment="true"/>
								<outline text="var runningtime = item.running ? utils.getFacebookTimeString (item.ctime, false) : &quot;STOPPED&quot;;"/>
								<outline text=""/>
								<outline text="console.log (runningtime);" isComment="true"/>
								<outline text="line (ix, domain, item.port, fileFromPath (item.file), item.logfile, item.restarts + 1, runningtime, item.ctHits, item.whenLastHit, false);"/>
								<outline text="});"/>
								</outline>
							<outline text="console.log (&quot;\n&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function helpCommand () {">
					<outline text="const maxcommandlength = 30;"/>
					<outline text="function onecommand (theCommand, theMeaning) {">
						<outline text="theCommand = pad (theCommand, &quot; &quot;, maxcommandlength, true);"/>
						<outline text="console.log (theCommand + theMeaning);"/>
						<outline text="}"/>
						</outline>
					<outline text="console.log (&quot;\nList of commands supported by &quot; + myProductName + &quot; v&quot; + myVersion + &quot;.\n&quot;);"/>
					<outline text="console.log ((pad (&quot;Command&quot;, &quot; &quot;, maxcommandlength, true) + &quot;Meaning&quot;).blue.bold);"/>
					<outline text="onecommand (&quot;list&quot;, &quot;list all the apps running in pagePark.&quot;);"/>
					<outline text="onecommand (&quot;rescan&quot;, &quot;search the domains folder for apps that aren't yet running and try to launch them.&quot;);"/>
					<outline text="onecommand (&quot;stop appnum&quot;, &quot;stops the app indicated by appnum.&quot;);"/>
					<outline text="onecommand (&quot;restart appnum&quot;, &quot;restarts the app indicated by appnum.&quot;);"/>
					<outline text="onecommand (&quot;log appnum&quot;, &quot;scrolls the log for the app indicated by appnum.&quot;);"/>
					<outline text="onecommand (&quot;now&quot;, &quot;the current time on the server&quot;);"/>
					<outline text="onecommand (&quot;help&quot;, &quot;show a list of commands that &quot; + shortProductName + &quot; supports.&quot;);"/>
					<outline text="console.log (&quot;\n&quot;);"/>
					<outline text="}"/>
					</outline>
				<outline text="function fileFromPath (f) {">
					<outline text="return (utils.stringLastField (f, &quot;/&quot;));"/>
					<outline text="}"/>
					</outline>
				<outline text="function bullshit () {" isComment="true">
					<outline text="console.log (pad (8, &quot;0&quot;, 4));"/>
					<outline text=""/>
					<outline text="var whenstart = new Date (), x;"/>
					<outline text="for (var i = 0; i &lt; 1000000; i++) {">
						<outline text="x = pad (utils.random (0, 999), &quot;0&quot;, 4);"/>
						<outline text="}"/>
						</outline>
					<outline text="console.log (utils.secondsSince (whenstart));"/>
					<outline text=""/>
					<outline text=""/>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text="function startup () {">
					<outline text="var myDir = __dirname;"/>
					<outline text="readJsonFile (myDir + &quot;/config.json&quot;, function (theData) {">
						<outline text="if (theData !== undefined) {">
							<outline text="for (var x in theData) {">
								<outline text="config [x] = theData [x];"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="config.myDir = myDir; //2/4/21 by DW" isComment="true"/>
						<outline text="console.log (&quot;\n&quot; + myProductName + &quot; v&quot; + myVersion + &quot;, config == &quot; + utils.jsonStringify (config));" isComment="true"/>
						<outline text="var fldone = false;"/>
						<outline text="if (process.argv.length &lt;= 2) {">
							<outline text="helpCommand (); //belt with no params is the help command"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="let beltfile = process.argv [2];" created="Tue, 21 Mar 2023 14:57:59 GMT"/>
							<outline text="fs.readFile (beltfile, function (err, filetext) {" created="Tue, 21 Mar 2023 14:57:48 GMT">
								<outline text="if (err) {" created="Tue, 21 Mar 2023 14:58:53 GMT">
									<outline text="console.log (err.message);" created="Tue, 21 Mar 2023 14:58:57 GMT"/>
									<outline text="}" created="Tue, 21 Mar 2023 14:59:03 GMT"/>
									</outline>
								<outline text="else {" created="Tue, 21 Mar 2023 14:59:04 GMT">
									<outline text="console.log (&quot;&quot;);" created="Wed, 22 Mar 2023 15:36:12 GMT"/>
									<outline text="belter.runScriptText (filetext.toString (), function (err, data) {" created="Tue, 21 Mar 2023 16:19:39 GMT">
										<outline text="if (err) {" created="Tue, 21 Mar 2023 16:20:14 GMT">
											<outline text="console.log (err.message + &quot;\n&quot;);" created="Tue, 21 Mar 2023 16:20:37 GMT"/>
											<outline text="}" created="Tue, 21 Mar 2023 16:20:42 GMT"/>
											</outline>
										<outline text="});" created="Tue, 21 Mar 2023 16:20:04 GMT"/>
										</outline>
									<outline text="}" created="Tue, 21 Mar 2023 14:59:06 GMT"/>
									</outline>
								<outline text="});" created="Tue, 21 Mar 2023 14:58:52 GMT"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="startup ();"/>
				</outline>
			<outline text="config.json" isComment="true">
				<outline text="{">
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="readme.md">
				<outline text="# Belter command line tool">
					<outline text="Run this from the command line to communicate directly with the copy of PagePark running on the same machine. It allows you to list processes, stop and restart them, and possibly other things in the future. Patterened after the command line interface of Forever, which is included in PagePark."/>
					<outline text="For more info on processes see the &lt;a href=&quot;https://github.com/scripting/pagePark/blob/master/docs/persistentapps.md&quot;&gt;docs&lt;/a&gt; for persistent apps. "/>
					</outline>
				<outline text="### How to install the command line tool">
					<outline text="1. cd into the cli directory"/>
					<outline text="2. chmod u+x cli.js" created="Wed, 23 Feb 2022 15:19:43 GMT"/>
					<outline text="3. npm install -g"/>
					<outline text="From there you can type &lt;i&gt;belt&lt;/i&gt; at the command line to do stuff with this tool"/>
					</outline>
				</outline>
			<outline text="examples/hello.belt" created="Tue, 21 Mar 2023 14:55:02 GMT">
				<outline text="console.log (&quot;Hello world.&quot;);" created="Tue, 21 Mar 2023 14:55:10 GMT"/>
				</outline>
			<outline text="examples/tenrandomslogans.belt" created="Wed, 22 Mar 2023 15:16:44 GMT">
				<outline text="for (var i = 1; i &lt;= 10; i++) {" created="Wed, 22 Mar 2023 15:16:53 GMT">
					<outline text="console.log (string.getRandomSnarkySlogan ());" created="Tue, 21 Mar 2023 14:55:10 GMT"/>
					<outline text="}" created="Wed, 22 Mar 2023 15:17:07 GMT"/>
					</outline>
				</outline>
			<outline text="examples/readfile.belt" created="Wed, 22 Mar 2023 15:16:44 GMT">
				<outline text="console.log (file.readWholeFile (&quot;data/tmp.txt&quot;))" created="Wed, 22 Mar 2023 15:22:21 GMT"/>
				</outline>
			<outline text="examples/s3write.belt" created="Wed, 22 Mar 2023 15:16:44 GMT">
				<outline text="const s3path = &quot;/scripting.com/tmp/belterdemo.txt&quot;;" created="Wed, 22 Mar 2023 16:05:55 GMT"/>
				<outline text="const filetext = file.readWholeFile (&quot;data/tmp.txt&quot;);" created="Wed, 22 Mar 2023 15:22:21 GMT"/>
				<outline text="console.log (&quot;s3.newObject == &quot; + s3.newObject (s3path, filetext));" created="Wed, 22 Mar 2023 16:05:03 GMT"/>
				<outline text="console.log (&quot;s3.getObject == &quot; + s3.getObject (s3path));" created="Wed, 22 Mar 2023 19:05:06 GMT"/>
				<outline text="console.log (&quot;s3.getObjectMetadata == &quot; + json.stringify (s3.getObjectMetadata (s3path)));" created="Wed, 22 Mar 2023 21:26:29 GMT"/>
				<outline text="console.log (&quot;s3.deleteObject == &quot; + s3.deleteObject (s3path));" created="Wed, 22 Mar 2023 19:05:06 GMT"/>
				</outline>
			<outline text="examples/s3llistobjects.belt" created="Wed, 22 Mar 2023 15:16:44 GMT">
				<outline text="const s3path = &quot;/scripting.com/misc/&quot;;" created="Wed, 22 Mar 2023 16:05:55 GMT"/>
				<outline text="var theList = s3.listObjects (s3path);" created="Wed, 22 Mar 2023 21:58:59 GMT"/>
				<outline text="console.log (json.stringify (theList));" created="Wed, 22 Mar 2023 22:01:41 GMT"/>
				</outline>
			<outline text="examples/httpread.belt" created="Wed, 22 Mar 2023 15:16:44 GMT">
				<outline text="const url = &quot;http://scripting.com/rss.xml&quot;;" created="Wed, 22 Mar 2023 16:05:55 GMT"/>
				<outline text="console.log (&quot;http.readUrl == &quot; + http.readUrl (url));" created="Wed, 22 Mar 2023 19:05:06 GMT"/>
				</outline>
			<outline text="examples/s3looper.belt" isComment="true" created="Wed, 22 Mar 2023 15:16:44 GMT">
				<outline text="const s3path = &quot;/scripting.com/tmp/&quot;;" created="Wed, 22 Mar 2023 16:05:55 GMT"/>
				<outline text="console.log (s3.listObjects (s3path));" created="Wed, 22 Mar 2023 21:58:59 GMT"/>
				</outline>
			<outline text="data/tmp.txt" created="Wed, 22 Mar 2023 15:24:16 GMT">
				<outline text="oh the buzzing of the bees" created="Wed, 22 Mar 2023 15:24:22 GMT"/>
				</outline>
			</outline>
		<outline text="build script" isComment="true" created="Sat, 26 Feb 2022 16:25:38 GMT">
			<outline text="nodeEditorSuite.utilities.buildBelterCommandline ()"/>
			</outline>
		</body>
	</opml>
